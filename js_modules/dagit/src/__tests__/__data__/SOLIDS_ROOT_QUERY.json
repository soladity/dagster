{"data": {"usedSolids": [{"__typename": "UsedSolid", "definition": {"__typename": "CompositeSolidDefinition", "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "inputMappings": [{"definition": {"name": "num"}, "mappedInput": {"definition": {"name": "num"}, "solid": {"name": "add_two"}}}], "metadata": [], "name": "add_four", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "outputMappings": [{"definition": {"name": "result"}, "mappedOutput": {"definition": {"name": "result"}, "solid": {"name": "add_two_2"}}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "metadata": [], "name": "add_one", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four.add_two.add_one"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four.add_two_2.add_one"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four.add_two.add_one_2"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four.add_two_2.add_one_2"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "CompositeSolidDefinition", "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "inputMappings": [{"definition": {"name": "num"}, "mappedInput": {"definition": {"name": "num"}, "solid": {"name": "add_one"}}}], "metadata": [], "name": "add_two", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "outputMappings": [{"definition": {"name": "result"}, "mappedOutput": {"definition": {"name": "result"}, "solid": {"name": "add_one_2"}}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four.add_two"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "add_four.add_two_2"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid executes the following SQL statement:\n    \n    select\n        cast(cast(arrdelay as float) as integer) as arrival_delay,\n        cast(cast(depdelay as float) as integer) as departure_delay,\n        origin,\n        dest as destination\n    from q2_sfo_outbound_flights\n    ", "inputDefinitions": [{"description": null, "name": "q2_sfo_outbound_flights", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "metadata": [{"key": "kind", "value": "sql"}, {"key": "sql", "value": "drop table if exists average_sfo_outbound_avg_delays_by_destination;\ncreate table average_sfo_outbound_avg_delays_by_destination as \n    select\n        cast(cast(arrdelay as float) as integer) as arrival_delay,\n        cast(cast(depdelay as float) as integer) as departure_delay,\n        origin,\n        dest as destination\n    from q2_sfo_outbound_flights\n    ;"}], "name": "average_sfo_outbound_avg_delays_by_destination", "outputDefinitions": [{"description": "The string name of the new table created by the solid", "name": "result", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "average_sfo_outbound_avg_delays_by_destination"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Optionally specify the key for the file to be ingested into the keyed store. Defaults to the last path component of the downloaded s3 key.", "isOptional": true, "name": "file_key"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "String", "name": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.46", "name": null}}, "description": "This is a solid which caches a file in s3 into file cache.\n\nThe `file_cache` is a resource type that allows a solid author to save files\nand assign a key to them. The keyed file store can be backed by local file or any\nobject store (currently we support s3). This keyed file store can be configured\nto be at an external location so that is persists in a well known spot between runs.\nIt is designed for the case where there is an expensive download step that should not\noccur unless the downloaded file does not exist. Redownload can be instigated either\nby configuring the source to overwrite files or to just delete the file in the underlying\nstorage manually.\n\nThis works by downloading the file to a temporary file, and then ingesting it into\nthe file cache. In the case of a filesystem-backed file cache, this is a file\ncopy. In the case of a object-store-backed file cache, this is an upload.\n\nIn order to work this must be executed within a mode that provides an `s3`\nand `file_cache` resource.\n    ", "inputDefinitions": [{"description": null, "name": "s3_coordinate", "type": {"description": null, "displayName": "S3Coordinate", "name": "S3Coordinate"}}], "metadata": [], "name": "cache_file_from_s3", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "requiredResources": [{"resourceKey": "s3"}, {"resourceKey": "file_cache"}]}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "april_on_time_s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "june_on_time_s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "master_cord_s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "may_on_time_s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.s3_to_df.cache_file_from_s3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "download_q2_sfo_weather"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": null, "isOptional": true, "name": "iterations"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Int", "name": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.279", "name": null}}, "description": null, "inputDefinitions": [{"description": null, "name": "links", "type": {"description": null, "displayName": "SparkRDD", "name": "SparkRDD"}}], "metadata": [], "name": "calculate_ranks", "outputDefinitions": [{"description": null, "name": "ranks", "type": {"description": null, "displayName": "SparkRDD", "name": "SparkRDD"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pyspark_pagerank"}, "solidHandle": {"handleID": "calculate_ranks"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "data_frame", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "metadata": [], "name": "canonicalize_column_names", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.canonicalize_column_names"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.canonicalize_column_names"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.canonicalize_column_names"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "A solid that just does a couple inline expectations", "inputDefinitions": [{"description": null, "name": "start", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "metadata": [], "name": "check_admins_both_succeed", "outputDefinitions": [], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "check_admins_both_succeed"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "A solid that just does a couple inline expectations, one of which fails", "inputDefinitions": [{"description": null, "name": "start", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "metadata": [], "name": "check_users_and_groups_one_fails_one_succeeds", "outputDefinitions": [], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "check_users_and_groups_one_fails_one_succeeds"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "urls", "type": {"description": null, "displayName": "SparkRDD", "name": "SparkRDD"}}], "metadata": [], "name": "compute_links", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "SparkRDD", "name": "SparkRDD"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pyspark_pagerank"}, "solidHandle": {"handleID": "compute_links"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid is backed by the notebook at /Users/alangenfeld/dagster/examples/dagster_examples/airline_demo/notebooks/Delays_by_Geography.ipynb", "inputDefinitions": [{"description": "The SQL table containing westbound delays.", "name": "westbound_delays", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}, {"description": "The SQL table containing eastbound delays.", "name": "eastbound_delays", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "metadata": [{"key": "notebook_path", "value": "/Users/alangenfeld/dagster/examples/dagster_examples/airline_demo/notebooks/Delays_by_Geography.ipynb"}, {"key": "kind", "value": "ipynb"}], "name": "delays_by_geography", "outputDefinitions": [{"description": "The saved PDF plots.", "name": "result", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "process_delays_by_geo.delays_by_geography"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid executes the following SQL statement:\n    \n    with avg_fares as (\n        select\n            tickets.origin,\n            tickets.dest,\n            avg(cast(tickets.itinfare as float)) as avg_fare,\n            avg(cast(tickets.farepermile as float)) as avg_fare_per_mile\n        from tickets_with_destination as tickets\n        where origin = 'SFO'\n        group by (tickets.origin, tickets.dest)\n    )\n    select\n        avg_fares.*,\n        avg(avg_delays.arrival_delay) as avg_arrival_delay,\n        avg(avg_delays.departure_delay) as avg_departure_delay\n    from\n        avg_fares,\n        average_sfo_outbound_avg_delays_by_destination as avg_delays\n    where\n        avg_fares.origin = avg_delays.origin and\n        avg_fares.dest = avg_delays.destination\n    group by (\n        avg_fares.avg_fare,\n        avg_fares.avg_fare_per_mile,\n        avg_fares.origin,\n        avg_delays.origin,\n        avg_fares.dest,\n        avg_delays.destination\n    )\n    ", "inputDefinitions": [{"description": null, "name": "tickets_with_destination", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}, {"description": null, "name": "average_sfo_outbound_avg_delays_by_destination", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "metadata": [{"key": "kind", "value": "sql"}, {"key": "sql", "value": "drop table if exists delays_vs_fares;\ncreate table delays_vs_fares as \n    with avg_fares as (\n        select\n            tickets.origin,\n            tickets.dest,\n            avg(cast(tickets.itinfare as float)) as avg_fare,\n            avg(cast(tickets.farepermile as float)) as avg_fare_per_mile\n        from tickets_with_destination as tickets\n        where origin = 'SFO'\n        group by (tickets.origin, tickets.dest)\n    )\n    select\n        avg_fares.*,\n        avg(avg_delays.arrival_delay) as avg_arrival_delay,\n        avg(avg_delays.departure_delay) as avg_departure_delay\n    from\n        avg_fares,\n        average_sfo_outbound_avg_delays_by_destination as avg_delays\n    where\n        avg_fares.origin = avg_delays.origin and\n        avg_fares.dest = avg_delays.destination\n    group by (\n        avg_fares.avg_fare,\n        avg_fares.avg_fare_per_mile,\n        avg_fares.origin,\n        avg_delays.origin,\n        avg_fares.dest,\n        avg_delays.destination\n    )\n    ;"}], "name": "delays_vs_fares", "outputDefinitions": [{"description": "The string name of the new table created by the solid", "name": "result", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "delays_vs_fares"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "CompositeSolidDefinition", "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "inputMappings": [{"definition": {"name": "num"}, "mappedInput": {"definition": {"name": "num"}, "solid": {"name": "div_two"}}}], "metadata": [], "name": "div_four", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "outputMappings": [{"definition": {"name": "result"}, "mappedOutput": {"definition": {"name": "result"}, "solid": {"name": "div_two_2"}}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "div_four"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "metadata": [], "name": "div_two", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "div_four.div_two"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "composition"}, "solidHandle": {"handleID": "div_four.div_two_2"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "S3 bucket name", "isOptional": false, "name": "bucket"}, {"configType": {"key": "String"}, "description": "S3 key name", "isOptional": false, "name": "key"}, {"configType": {"key": "Bool"}, "description": null, "isOptional": true, "name": "skip_if_present"}, {"configType": {"key": "Path"}, "description": "Specifies the path at which to download the object.", "isOptional": false, "name": "target_folder"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Bool", "name": "Bool"}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Path", "name": "Path"}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "String", "name": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.169", "name": null}}, "description": "Downloads an object from S3 to a file.", "inputDefinitions": [], "metadata": [], "name": "download_from_s3_to_file", "outputDefinitions": [{"description": "The path to the downloaded object.", "name": "result", "type": {"description": "A path at which a file actually exists", "displayName": "FileExistsAtPath", "name": "FileExistsAtPath"}}], "requiredResources": [{"resourceKey": "s3"}]}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "event_ingest_pipeline"}, "solidHandle": {"handleID": "download_from_s3_to_file"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid executes the following SQL statement:\n    \n    select\n        avg(cast(cast(arrdelay as float) as integer)) as avg_arrival_delay,\n        avg(cast(cast(depdelay as float) as integer)) as avg_departure_delay,\n        origin,\n        dest as destination,\n        count(1) as num_flights,\n        avg(cast(dest_latitude as float)) as dest_latitude,\n        avg(cast(dest_longitude as float)) as dest_longitude,\n        avg(cast(origin_latitude as float)) as origin_latitude,\n        avg(cast(origin_longitude as float)) as origin_longitude\n    from q2_on_time_data\n    where\n        cast(origin_longitude as float) < cast(dest_longitude as float) and\n        originstate != 'HI' and\n        deststate != 'HI' and\n        originstate != 'AK' and\n        deststate != 'AK'\n    group by (origin,destination)\n    order by num_flights desc\n    limit 100;\n    ", "inputDefinitions": [], "metadata": [{"key": "kind", "value": "sql"}, {"key": "sql", "value": "drop table if exists eastbound_delays;\ncreate table eastbound_delays as \n    select\n        avg(cast(cast(arrdelay as float) as integer)) as avg_arrival_delay,\n        avg(cast(cast(depdelay as float) as integer)) as avg_departure_delay,\n        origin,\n        dest as destination,\n        count(1) as num_flights,\n        avg(cast(dest_latitude as float)) as dest_latitude,\n        avg(cast(dest_longitude as float)) as dest_longitude,\n        avg(cast(origin_latitude as float)) as origin_latitude,\n        avg(cast(origin_longitude as float)) as origin_longitude\n    from q2_on_time_data\n    where\n        cast(origin_longitude as float) < cast(dest_longitude as float) and\n        originstate != 'HI' and\n        deststate != 'HI' and\n        originstate != 'AK' and\n        deststate != 'AK'\n    group by (origin,destination)\n    order by num_flights desc\n    limit 100;\n    ;"}], "name": "eastbound_delays", "outputDefinitions": [{"description": "The string name of the new table created by the solid", "name": "result", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "process_delays_by_geo.eastbound_delays"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": null, "isOptional": false, "name": "return_wrong_type"}, {"configType": {"key": "Bool"}, "description": null, "isOptional": false, "name": "throw_in_solid"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Bool", "name": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.31", "name": null}}, "description": null, "inputDefinitions": [], "metadata": [], "name": "emit_num", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "error_monster"}, "solidHandle": {"handleID": "start"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Arguments passed to the main method of your main class, if any", "isOptional": true, "name": "application_arguments"}, {"configType": {"key": "Path"}, "description": "Path to a bundled jar including your application and all\n                        dependencies. The URL must be globally visible inside of your cluster, for\n                        instance, an hdfs:// path or a file:// path that is present on all nodes.\n                        ", "isOptional": false, "name": "application_jar"}, {"configType": {"key": "SparkDeployMode"}, "description": "Whether to deploy your driver on the worker nodes (cluster) or locally as an\n        external client (client) (default: client). A common deployment strategy is to submit your\n        application from a gateway machine that is physically co-located with your worker machines\n        (e.g. Master node in a standalone EC2 cluster). In this setup, client mode is appropriate.\n        In client mode, the driver is launched directly within the spark-submit process which acts\n        as a client to the cluster. The input and output of the application is attached to the\n        console. Thus, this mode is especially suitable for applications that involve the REPL (e.g.\n        Spark shell).", "isOptional": true, "name": "deploy_mode"}, {"configType": {"key": "String"}, "description": "The master URL for the cluster (e.g. spark://23.195.26.187:7077)", "isOptional": false, "name": "master_url"}, {"configType": {"key": "PermissiveDict.277"}, "description": null, "isOptional": true, "name": "spark_conf"}, {"configType": {"key": "String"}, "description": "The path to your spark installation. Defaults to $SPARK_HOME at runtime if not provided.", "isOptional": true, "name": "spark_home"}, {"configType": {"key": "List.String"}, "description": "The outputs that this Spark job will produce", "isOptional": false, "name": "spark_outputs"}], "innerTypes": [{"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Memory Management: Enables proactive block replication for RDD blocks. Cached RDD block replicas lost due to executor failures are replenished if there are any existing available replicas. This tries to get the replication level of the block to the initial number.", "isOptional": true, "name": "proactive"}], "innerTypes": [{"key": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.231", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.248"}, "description": null, "isOptional": true, "name": "wait"}], "innerTypes": [{"key": "PermissiveDict.248"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.249", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Runtime Environment: Enable executor log compression. If it is enabled, the rolled executor logs will be compressed. Disabled by default.", "isOptional": true, "name": "enableCompression"}, {"configType": {"key": "Int"}, "description": "Runtime Environment: Sets the number of latest rolling log files that are going to be retained by the system. Older log files will be deleted. Disabled by default.", "isOptional": true, "name": "maxRetainedFiles"}, {"configType": {"key": "Int"}, "description": "Runtime Environment: Set the max size of the file in bytes by which the executor logs will be rolled over. Rolling is disabled by default. See spark.executor.logs.rolling.maxRetainedFiles for automatic cleaning of old logs.", "isOptional": true, "name": "maxSize"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Set the strategy of rolling of executor logs. By default it is disabled. It can be set to \"time\" (time-based rolling) or \"size\" (size-based rolling). For \"time\", use spark.executor.logs.rolling.time.interval to set the rolling interval. For \"size\", use spark.executor.logs.rolling.maxSize to set the maximum file size for rolling.", "isOptional": true, "name": "strategy"}, {"configType": {"key": "PermissiveDict.174"}, "description": null, "isOptional": true, "name": "time"}], "innerTypes": [{"key": "Int"}, {"key": "Bool"}, {"key": "PermissiveDict.174"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.175", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Float"}, "description": "Memory Management: (deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of Java heap to use for Spark's memory cache. This should not be larger than the \"old\" generation of objects in the JVM, which by default is given 0.6 of the heap, but you can increase it if you configure your own old generation size.", "isOptional": true, "name": "memoryFraction"}, {"configType": {"key": "String"}, "description": "Execution Behavior: Size in bytes of a block above which Spark memory maps when reading a block from disk. This prevents Spark from memory mapping very small blocks. In general, memory mapping has high overhead for blocks close to or below the page size of the operating system.", "isOptional": true, "name": "memoryMapThreshold"}, {"configType": {"key": "PermissiveDict.231"}, "description": null, "isOptional": true, "name": "replication"}, {"configType": {"key": "Float"}, "description": "Memory Management: (deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of spark.storage.memoryFraction to use for unrolling blocks in memory. This is dynamically allocated by dropping existing blocks when there is not enough free storage space to unroll the new block in its entirety.", "isOptional": true, "name": "unrollFraction"}], "innerTypes": [{"key": "Bool"}, {"key": "PermissiveDict.231"}, {"key": "Float"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.232", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.249"}, "description": null, "isOptional": true, "name": "ack"}], "innerTypes": [{"key": "String"}, {"key": "PermissiveDict.248"}, {"key": "PermissiveDict.249"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.250", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.250"}, "description": null, "isOptional": true, "name": "connection"}], "innerTypes": [{"key": "PermissiveDict.250"}, {"key": "PermissiveDict.249"}, {"key": "PermissiveDict.248"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.251", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: Enables monitoring of killed / interrupted tasks. When set to true, any task which is killed will be monitored by the executor until that task actually finishes executing. See the other spark.task.reaper.* configurations for details on how to control the exact behavior of this monitoring. When set to false (the default), task killing will use an older code path which lacks such monitoring.", "isOptional": true, "name": "enabled"}, {"configType": {"key": "String"}, "description": "Scheduling: When spark.task.reaper.enabled = true, this setting specifies a timeout after which the executor JVM will kill itself if a killed task has not stopped running. The default value, -1, disables this mechanism and prevents the executor from self-destructing. The purpose of this setting is to act as a safety-net to prevent runaway noncancellable tasks from rendering an executor unusable.", "isOptional": true, "name": "killTimeout"}, {"configType": {"key": "String"}, "description": "Scheduling: When spark.task.reaper.enabled = true, this setting controls the frequency at which executors will poll the status of killed tasks. If a killed task is still running when polled then a warning will be logged and, by default, a thread-dump of the task will be logged (this thread dump can be disabled via the spark.task.reaper.threadDump setting, which is documented below).", "isOptional": true, "name": "pollingInterval"}, {"configType": {"key": "String"}, "description": "Scheduling: When spark.task.reaper.enabled = true, this setting controls whether task thread dumps are logged during periodic polling of killed tasks. Set this to false to disable collection of thread dumps.", "isOptional": true, "name": "threadDump"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.265", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Memory Management: Controls how often to trigger a garbage collection. This context cleaner triggers cleanups only when weak references are garbage collected. In long-running applications with large driver JVMs, where there is little memory pressure on the driver, this may happen very occasionally or not at all. Not cleaning at all may lead to executors running out of disk space after a while.", "isOptional": true, "name": "interval"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.233", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: Number of cores to allocate for each task.", "isOptional": true, "name": "cpus"}, {"configType": {"key": "String"}, "description": "Scheduling: Number of failures of any particular task before giving up on the job. The total number of failures spread across different tasks will not cause the job to fail; a particular task has to fail this number of attempts. Should be greater than or equal to 1. Number of allowed retries = this value - 1.", "isOptional": true, "name": "maxFailures"}, {"configType": {"key": "PermissiveDict.265"}, "description": null, "isOptional": true, "name": "reaper"}], "innerTypes": [{"key": "PermissiveDict.265"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.266", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: When running on a standalone deploy cluster or a Mesos cluster in \"coarse-grained\" sharing mode, the maximum amount of CPU cores to request for the application from across the cluster (not from each machine). If not set, the default will be spark.deploy.defaultCores on Spark's standalone cluster manager, or infinite (all available cores) on Mesos.", "isOptional": true, "name": "max"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.252", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Execution Behavior: The number of cores to use on each executor. In standalone and Mesos coarse-grained modes, for more detail, see this description.", "isOptional": true, "name": "cores"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Extra classpath entries to prepend to the classpath of executors. This exists primarily for backwards-compatibility with older versions of Spark. Users typically should not need to set this option.", "isOptional": true, "name": "extraClassPath"}, {"configType": {"key": "String"}, "description": "Runtime Environment: A string of extra JVM options to pass to executors. For instance, GC settings or other logging. Note that it is illegal to set Spark properties or maximum heap size (-Xmx) settings with this option. Spark properties should be set using a SparkConf object or the spark-defaults.conf file used with the spark-submit script. Maximum heap size settings can be set with spark.executor.memory. The following symbols, if present will be interpolated: {{APP_ID}} will be replaced by application ID and {{EXECUTOR_ID}} will be replaced by executor ID. For example, to enable verbose gc logging to a file named for the executor ID of the app in /tmp, pass a 'value' of: -verbose:gc -Xloggc:/tmp/{{APP_ID}}-{{EXECUTOR_ID}}.gc", "isOptional": true, "name": "extraJavaOptions"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Set a special library path to use when launching executor JVM's.", "isOptional": true, "name": "extraLibraryPath"}, {"configType": {"key": "String"}, "description": "Execution Behavior: Interval between each executor's heartbeats to the driver. Heartbeats let the driver know that the executor is still alive and update it with metrics for in-progress tasks. spark.executor.heartbeatInterval should be significantly less than spark.network.timeout", "isOptional": true, "name": "heartbeatInterval"}, {"configType": {"key": "PermissiveDict.176"}, "description": null, "isOptional": true, "name": "logs"}, {"configType": {"key": "String"}, "description": "Application Properties: Amount of memory to use per executor process, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g).", "isOptional": true, "name": "memory"}, {"configType": {"key": "String"}, "description": "Application Properties: The amount of off-heap memory to be allocated per executor, in MiB unless otherwise specified. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the executor size (typically 6-10%). This option is currently supported on YARN and Kubernetes.", "isOptional": true, "name": "memoryOverhead"}, {"configType": {"key": "PermissiveDict.173"}, "description": null, "isOptional": true, "name": "pyspark"}, {"configType": {"key": "Bool"}, "description": "Runtime Environment: (Experimental) Same functionality as spark.driver.userClassPathFirst, but applied to executor instances.", "isOptional": true, "name": "userClassPathFirst"}], "innerTypes": [{"key": "Bool"}, {"key": "Int"}, {"key": "PermissiveDict.176"}, {"key": "PermissiveDict.174"}, {"key": "String"}, {"key": "PermissiveDict.175"}, {"key": "PermissiveDict.173"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.177", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: Number of consecutive stage attempts allowed before a stage is aborted.", "isOptional": true, "name": "maxConsecutiveAttempts"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.267", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Memory Management: Controls whether the cleaning thread should block on cleanup tasks (other than shuffle, which is controlled by spark.cleaner.referenceTracking.blocking.shuffle Spark property).", "isOptional": true, "name": "root"}, {"configType": {"key": "Bool"}, "description": "Memory Management: Controls whether the cleaning thread should block on shuffle cleanup tasks.", "isOptional": true, "name": "shuffle"}], "innerTypes": [{"key": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.234", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.234"}, "description": null, "isOptional": true, "name": "blocking"}, {"configType": {"key": "Bool"}, "description": "Memory Management: Controls whether to clean checkpoint files if the reference is out of scope.", "isOptional": true, "name": "cleanCheckpoints"}, {"configType": {"key": "Bool"}, "description": "Memory Management: Enables or disables context cleaning.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "Bool"}, {"key": "PermissiveDict.234"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.235", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: Customize the locality wait for node locality. For example, you can set this to 0 to skip node locality and search immediately for rack locality (if your cluster has rack information).", "isOptional": true, "name": "node"}, {"configType": {"key": "String"}, "description": "Scheduling: Customize the locality wait for process locality. This affects tasks that attempt to access cached data in a particular executor process.", "isOptional": true, "name": "process"}, {"configType": {"key": "String"}, "description": "Scheduling: Customize the locality wait for rack locality.", "isOptional": true, "name": "rack"}, {"configType": {"key": "String"}, "description": "Scheduling: How long to wait to launch a data-local task before giving up and launching it on a less-local node. The same wait will be used to step through multiple locality levels (process-local, node-local, rack-local and then any). It is also possible to customize the waiting time for each level by setting spark.locality.wait.node, etc. You should increase this setting if your tasks are long and see poor locality, but the default usually works well.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.253", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.233"}, "description": null, "isOptional": true, "name": "periodicGC"}, {"configType": {"key": "PermissiveDict.235"}, "description": null, "isOptional": true, "name": "referenceTracking"}], "innerTypes": [{"key": "Bool"}, {"key": "PermissiveDict.233"}, {"key": "PermissiveDict.235"}, {"key": "String"}, {"key": "PermissiveDict.234"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.236", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.253"}, "description": null, "isOptional": true, "name": "wait"}], "innerTypes": [{"key": "PermissiveDict.253"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.254", "name": null}, {"description": null, "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "SparkDeployMode", "name": "SparkDeployMode"}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Application Properties: Directory to use for \"scratch\" space in Spark, including map output files and RDDs that get stored on disk. This should be on a fast, local disk in your system. It can also be a comma-separated list of multiple directories on different disks. NOTE: In Spark 1.0 and later this will be overridden by SPARK_LOCAL_DIRS (Standalone), MESOS_SANDBOX (Mesos) or LOCAL_DIRS (YARN) environment variables set by the cluster manager.", "isOptional": true, "name": "dir"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.178", "name": null}, {"description": "List of [String]", "innerTypes": [{"key": "String"}], "isList": true, "isNullable": false, "isSelector": false, "key": "List.String", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Application Properties: The deploy mode of Spark driver program, either \"client\" or \"cluster\", Which means to launch driver program locally (\"client\") or remotely (\"cluster\") on one of the nodes inside the cluster.", "isOptional": true, "name": "deployMode"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Comma-separated list of .zip, .egg, or .py files to place on the PYTHONPATH for Python apps. Globs are allowed.", "isOptional": true, "name": "pyFiles"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.179", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Execution Behavior: Default number of partitions in RDDs returned by transformations like join, reduceByKey, and parallelize when not set by user.", "isOptional": true, "name": "parallelism"}], "innerTypes": [{"key": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.237", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Dynamic Allocation: If dynamic allocation is enabled and an executor which has cached data blocks has been idle for more than this duration, the executor will be removed. For more details, see this description.", "isOptional": true, "name": "cachedExecutorIdleTimeout"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: Whether to use dynamic resource allocation, which scales the number of executors registered with this application up and down based on the workload. For more detail, see the description here. This requires spark.shuffle.service.enabled to be set. The following configurations are also relevant: spark.dynamicAllocation.minExecutors, spark.dynamicAllocation.maxExecutors, and spark.dynamicAllocation.initialExecutors spark.dynamicAllocation.executorAllocationRatio", "isOptional": true, "name": "enabled"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: By default, the dynamic allocation will request enough executors to maximize the parallelism according to the number of tasks to process. While this minimizes the latency of the job, with small tasks this setting can waste a lot of resources due to executor allocation overhead, as some executor might not even do any work. This setting allows to set a ratio that will be used to reduce the number of executors w.r.t. full parallelism. Defaults to 1.0 to give maximum parallelism. 0.5 will divide the target number of executors by 2 The target number of executors computed by the dynamicAllocation can still be overridden by the spark.dynamicAllocation.minExecutors and spark.dynamicAllocation.maxExecutors settings", "isOptional": true, "name": "executorAllocationRatio"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: If dynamic allocation is enabled and an executor has been idle for more than this duration, the executor will be removed. For more detail, see this description.", "isOptional": true, "name": "executorIdleTimeout"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: Initial number of executors to run if dynamic allocation is enabled. If `--num-executors` (or `spark.executor.instances`) is set and larger than this value, it will be used as the initial number of executors.", "isOptional": true, "name": "initialExecutors"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: Upper bound for the number of executors if dynamic allocation is enabled.", "isOptional": true, "name": "maxExecutors"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: Lower bound for the number of executors if dynamic allocation is enabled.", "isOptional": true, "name": "minExecutors"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: If dynamic allocation is enabled and there have been pending tasks backlogged for more than this duration, new executors will be requested. For more detail, see this description.", "isOptional": true, "name": "schedulerBacklogTimeout"}, {"configType": {"key": "String"}, "description": "Dynamic Allocation: Same as spark.dynamicAllocation.schedulerBacklogTimeout, but used only for subsequent executor requests. For more detail, see this description.", "isOptional": true, "name": "sustainedSchedulerBacklogTimeout"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.268", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Runtime Environment: Regex to decide which Spark configuration properties and environment variables in driver and executor environments contain sensitive information. When this regex matches a property key or value, the value is redacted from the environment UI and various logs like YARN and event logs.", "isOptional": true, "name": "regex"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.181", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: The interval length for the scheduler to revive the worker resource offers to run tasks.", "isOptional": true, "name": "interval"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.255", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Application Properties: Application information that will be written into Yarn RM log/HDFS audit log when running on Yarn/HDFS. Its length depends on the Hadoop configuration hadoop.caller.context.max.size. It should be concise, and typically can have up to 50 characters.", "isOptional": true, "name": "callerContext"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.180", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Execution Behavior: The file output committer algorithm version, valid algorithm version number: 1 or 2. Version 2 may have better performance, but version 1 may handle failures better in certain situations, as per MAPREDUCE-4815.", "isOptional": true, "name": "version"}], "innerTypes": [{"key": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.238", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: Capacity for event queue in Spark listener bus, must be greater than 0. Consider increasing value (e.g. 20000) if listener events are dropped. Increasing this value may result in the driver using more memory.", "isOptional": true, "name": "capacity"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.256", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "SparkR: Executable for executing R scripts in client modes for driver. Ignored in cluster modes.", "isOptional": true, "name": "command"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.269", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.238"}, "description": null, "isOptional": true, "name": "algorithm"}], "innerTypes": [{"key": "PermissiveDict.238"}, {"key": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.239", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Application Properties: The name of your application. This will appear in the UI and in log data.", "isOptional": true, "name": "name"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.170", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.256"}, "description": null, "isOptional": true, "name": "eventqueue"}], "innerTypes": [{"key": "PermissiveDict.256"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.257", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.175"}, "description": null, "isOptional": true, "name": "rolling"}], "innerTypes": [{"key": "Bool"}, {"key": "Int"}, {"key": "PermissiveDict.174"}, {"key": "String"}, {"key": "PermissiveDict.175"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.176", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "SparkR: Executable for executing sparkR shell in client modes for driver. Ignored in cluster modes. It is the same as environment variable SPARKR_DRIVER_R, but take precedence over it. spark.r.shell.command is used for sparkR shell while spark.r.driver.command is used for running R script.", "isOptional": true, "name": "command"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.270", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.239"}, "description": null, "isOptional": true, "name": "fileoutputcommitter"}], "innerTypes": [{"key": "PermissiveDict.238"}, {"key": "PermissiveDict.239"}, {"key": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.240", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.257"}, "description": null, "isOptional": true, "name": "listenerbus"}, {"configType": {"key": "String"}, "description": "Scheduling: Maximum amount of time to wait for resources to register before scheduling begins.", "isOptional": true, "name": "maxRegisteredResourcesWaitingTime"}, {"configType": {"key": "String"}, "description": "Scheduling: The minimum ratio of registered resources (registered resources / total expected resources) (resources are executors in yarn mode and Kubernetes mode, CPU cores in standalone mode and Mesos coarse-grained mode ['spark.cores.max' value is total expected resources for Mesos coarse-grained mode] ) to wait for before scheduling begins. Specified as a double between 0.0 and 1.0. Regardless of whether the minimum ratio of resources has been reached, the maximum amount of time it will wait before scheduling begins is controlled by config spark.scheduler.maxRegisteredResourcesWaitingTime.", "isOptional": true, "name": "minRegisteredResourcesRatio"}, {"configType": {"key": "String"}, "description": "Scheduling: The scheduling mode between jobs submitted to the same SparkContext. Can be set to FAIR to use fair sharing instead of queueing jobs one after another. Useful for multi-user services.", "isOptional": true, "name": "mode"}, {"configType": {"key": "PermissiveDict.255"}, "description": null, "isOptional": true, "name": "revive"}], "innerTypes": [{"key": "PermissiveDict.256"}, {"key": "PermissiveDict.255"}, {"key": "PermissiveDict.257"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.258", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Execution Behavior: If set to true, clones a new Hadoop Configuration object for each task. This option should be enabled to work around Configuration thread-safety issues (see SPARK-2546 for more details). This is disabled by default in order to avoid unexpected performance regressions for jobs that are not affected by these issues.", "isOptional": true, "name": "cloneConf"}, {"configType": {"key": "PermissiveDict.240"}, "description": null, "isOptional": true, "name": "mapreduce"}, {"configType": {"key": "Bool"}, "description": "Execution Behavior: If set to true, validates the output specification (e.g. checking if the output directory already exists) used in saveAsHadoopFile and other variants. This can be disabled to silence exceptions due to pre-existing output directories. We recommend that users do not disable this except if trying to achieve compatibility with previous versions of Spark. Simply use Hadoop's FileSystem API to delete output directories by hand. This setting is ignored for jobs generated through Spark Streaming's StreamingContext, since data may need to be rewritten to pre-existing output directories during checkpoint recovery.", "isOptional": true, "name": "validateOutputSpecs"}], "innerTypes": [{"key": "Bool"}, {"key": "PermissiveDict.239"}, {"key": "Int"}, {"key": "PermissiveDict.240"}, {"key": "PermissiveDict.238"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.241", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "SparkR: Connection timeout set by R process on its connection to RBackend in seconds.", "isOptional": true, "name": "backendConnectionTimeout"}, {"configType": {"key": "String"}, "description": "SparkR: Executable for executing R scripts in cluster modes for both driver and workers.", "isOptional": true, "name": "command"}, {"configType": {"key": "PermissiveDict.269"}, "description": null, "isOptional": true, "name": "driver"}, {"configType": {"key": "String"}, "description": "SparkR: Interval for heartbeats sent from SparkR backend to R process to prevent connection timeout.", "isOptional": true, "name": "heartBeatInterval"}, {"configType": {"key": "String"}, "description": "SparkR: Number of threads used by RBackend to handle RPC calls from SparkR package.", "isOptional": true, "name": "numRBackendThreads"}, {"configType": {"key": "PermissiveDict.270"}, "description": null, "isOptional": true, "name": "shell"}], "innerTypes": [{"key": "PermissiveDict.270"}, {"key": "PermissiveDict.269"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.271", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Maximum message size (in MB) to allow in \"control plane\" communication; generally only applies to map output size information sent between executors and the driver. Increase this if you are running jobs with many thousands of map and reduce tasks and see messages about the RPC message size.", "isOptional": true, "name": "maxSize"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.242", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Runtime Environment: Python binary executable to use for PySpark in driver. (default is spark.pyspark.python)", "isOptional": true, "name": "python"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.187", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: (Experimental) For a given task, how many times it can be retried on one executor before the executor is blacklisted for that task.", "isOptional": true, "name": "maxTaskAttemptsPerExecutor"}, {"configType": {"key": "String"}, "description": "Scheduling: (Experimental) For a given task, how many times it can be retried on one node, before the entire node is blacklisted for that task.", "isOptional": true, "name": "maxTaskAttemptsPerNode"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.259", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "GraphX: Checkpoint interval for graph and message in Pregel. It used to avoid stackOverflowError due to long lineage chains after lots of iterations. The checkpoint is disabled by default.", "isOptional": true, "name": "checkpointInterval"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.272", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Runtime Environment: The directory which is used to dump the profile result before driver exiting. The results will be dumped as separated file for each RDD. They can be loaded by ptats.Stats(). If this is specified, the profile result will not be displayed automatically.", "isOptional": true, "name": "dump"}, {"configType": {"key": "Bool"}, "description": "Runtime Environment: Enable profiling in Python worker, the profile result will show up by sc.show_profiles(), or it will be displayed before the driver exits. It also can be dumped into disk by sc.dump_profiles(path). If some of the profile results had been displayed manually, they will not be displayed automatically before driver exiting. By default the pyspark.profiler.BasicProfiler will be used, but this can be overridden by passing a profiler class in as a parameter to the SparkContext constructor.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "Bool"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.182", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.272"}, "description": null, "isOptional": true, "name": "pregel"}], "innerTypes": [{"key": "PermissiveDict.272"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.273", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Driver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors.", "isOptional": true, "name": "port"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.171", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Duration for an RPC ask operation to wait before retrying.", "isOptional": true, "name": "wait"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.243", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: (Experimental) How many different executors are marked as blacklisted for a given stage, before the entire node is marked as failed for the stage.", "isOptional": true, "name": "maxFailedExecutorsPerNode"}, {"configType": {"key": "String"}, "description": "Scheduling: (Experimental) How many different tasks must fail on one executor, within one stage, before the executor is blacklisted for that stage.", "isOptional": true, "name": "maxFailedTasksPerExecutor"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.260", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Application Properties: The amount of memory to be allocated to PySpark in each executor, in MiB unless otherwise specified. If set, PySpark memory for an executor will be limited to this amount. If not set, Spark will not limit Python's memory use and it is up to the application to avoid exceeding the overhead memory space shared with other non-JVM processes. When PySpark is run in YARN or Kubernetes, this memory is added to executor resource requests.", "isOptional": true, "name": "memory"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.173", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Runtime Environment: Amount of memory to use per python worker process during aggregation, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g). If the memory used during aggregation goes above this amount, it will spill the data into disks.", "isOptional": true, "name": "memory"}, {"configType": {"key": "Bool"}, "description": "Runtime Environment: Reuse Python worker or not. If yes, it will use a fixed number of Python workers, does not need to fork() a Python process for every task. It will be very useful if there is large broadcast, then the broadcast will not be needed to transferred from JVM to Python worker for every task.", "isOptional": true, "name": "reuse"}], "innerTypes": [{"key": "Bool"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.183", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Duration for an RPC ask operation to wait before timing out.", "isOptional": true, "name": "askTimeout"}, {"configType": {"key": "String"}, "description": "Networking: Duration for an RPC remote endpoint lookup operation to wait before timing out.", "isOptional": true, "name": "lookupTimeout"}, {"configType": {"key": "PermissiveDict.242"}, "description": null, "isOptional": true, "name": "message"}, {"configType": {"key": "String"}, "description": "Networking: Number of times to retry before an RPC task gives up. An RPC task will run at most times of this number.", "isOptional": true, "name": "numRetries"}, {"configType": {"key": "PermissiveDict.243"}, "description": null, "isOptional": true, "name": "retry"}], "innerTypes": [{"key": "PermissiveDict.243"}, {"key": "PermissiveDict.242"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.244", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Deploy: When `spark.deploy.recoveryMode` is set to ZOOKEEPER, this configuration is used to set the zookeeper directory to store recovery state.", "isOptional": true, "name": "dir"}, {"configType": {"key": "String"}, "description": "Deploy: When `spark.deploy.recoveryMode` is set to ZOOKEEPER, this configuration is used to set the zookeeper URL to connect to.", "isOptional": true, "name": "url"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.274", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.182"}, "description": null, "isOptional": true, "name": "profile"}, {"configType": {"key": "PermissiveDict.183"}, "description": null, "isOptional": true, "name": "worker"}], "innerTypes": [{"key": "Bool"}, {"key": "PermissiveDict.183"}, {"key": "PermissiveDict.182"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.184", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: (Experimental) If set to \"true\", Spark will blacklist the executor immediately when a fetch failure happens. If external shuffle service is enabled, then the whole node will be blacklisted.", "isOptional": true, "name": "enabled"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.261", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Hostname or IP address where to bind listening sockets. This config overrides the SPARK_LOCAL_IP environment variable (see below). It also allows a different address from the local one to be advertised to executors or external systems. This is useful, for example, when running containers with bridged networking. For this to properly work, the different ports used by the driver (RPC, block manager and UI) need to be forwarded from the container's host.", "isOptional": true, "name": "bindAddress"}, {"configType": {"key": "PermissiveDict.171"}, "description": null, "isOptional": true, "name": "blockManager"}, {"configType": {"key": "Int"}, "description": "Application Properties: Number of cores to use for the driver process, only in cluster mode.", "isOptional": true, "name": "cores"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Extra classpath entries to prepend to the classpath of the driver. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-class-path command line option or in your default properties file.", "isOptional": true, "name": "extraClassPath"}, {"configType": {"key": "String"}, "description": "Runtime Environment: A string of extra JVM options to pass to the driver. For instance, GC settings or other logging. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with spark.driver.memory in the cluster mode and through the --driver-memory command line option in the client mode. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-java-options command line option or in your default properties file.", "isOptional": true, "name": "extraJavaOptions"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Set a special library path to use when launching the driver JVM. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-library-path command line option or in your default properties file.", "isOptional": true, "name": "extraLibraryPath"}, {"configType": {"key": "String"}, "description": "Networking: Hostname or IP address for the driver. This is used for communicating with the executors and the standalone Master.", "isOptional": true, "name": "host"}, {"configType": {"key": "String"}, "description": "Application Properties: Limit of total size of serialized results of all partitions for each Spark action (e.g. collect) in bytes. Should be at least 1M, or 0 for unlimited. Jobs will be aborted if the total size is above this limit. Having a high limit may cause out-of-memory errors in driver (depends on spark.driver.memory and memory overhead of objects in JVM). Setting a proper limit can protect the driver from out-of-memory errors.", "isOptional": true, "name": "maxResultSize"}, {"configType": {"key": "String"}, "description": "Application Properties: Amount of memory to use for the driver process, i.e. where SparkContext is initialized, in the same format as JVM memory strings with a size unit suffix (\"k\", \"m\", \"g\" or \"t\") (e.g. 512m, 2g). Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-memory command line option or in your default properties file.", "isOptional": true, "name": "memory"}, {"configType": {"key": "String"}, "description": "Application Properties: The amount of off-heap memory to be allocated per driver in cluster mode, in MiB unless otherwise specified. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the container size (typically 6-10%). This option is currently supported on YARN and Kubernetes.", "isOptional": true, "name": "memoryOverhead"}, {"configType": {"key": "String"}, "description": "Networking: Port for the driver to listen on. This is used for communicating with the executors and the standalone Master.", "isOptional": true, "name": "port"}, {"configType": {"key": "Bool"}, "description": "Application Properties: If true, restarts the driver automatically if it fails with a non-zero exit status. Only has effect in Spark standalone mode or Mesos cluster deploy mode.", "isOptional": true, "name": "supervise"}, {"configType": {"key": "Bool"}, "description": "Runtime Environment: (Experimental) Whether to give user-added jars precedence over Spark's own jars when loading classes in the driver. This feature can be used to mitigate conflicts between Spark's dependencies and user dependencies. It is currently an experimental feature. This is used in cluster mode only.", "isOptional": true, "name": "userClassPathFirst"}], "innerTypes": [{"key": "Int"}, {"key": "Bool"}, {"key": "PermissiveDict.171"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.172", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Deploy: The recovery mode setting to recover submitted Spark jobs with cluster mode when it failed and relaunches. This is only applicable for cluster mode when running with Standalone or Mesos.", "isOptional": true, "name": "recoveryMode"}, {"configType": {"key": "PermissiveDict.274"}, "description": null, "isOptional": true, "name": "zookeeper"}], "innerTypes": [{"key": "PermissiveDict.274"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.275", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Port for all block managers to listen on. These exist on both the driver and the executors.", "isOptional": true, "name": "port"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.245", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.261"}, "description": null, "isOptional": true, "name": "fetchFailure"}, {"configType": {"key": "String"}, "description": "Scheduling: (Experimental) How many different executors must be blacklisted for the entire application, before the node is blacklisted for the entire application. Blacklisted nodes will be automatically added back to the pool of available resources after the timeout specified by spark.blacklist.timeout. Note that with dynamic allocation, though, the executors on the node may get marked as idle and be reclaimed by the cluster manager.", "isOptional": true, "name": "maxFailedExecutorsPerNode"}, {"configType": {"key": "String"}, "description": "Scheduling: (Experimental) How many different tasks must fail on one executor, in successful task sets, before the executor is blacklisted for the entire application. Blacklisted executors will be automatically added back to the pool of available resources after the timeout specified by spark.blacklist.timeout. Note that with dynamic allocation, though, the executors may get marked as idle and be reclaimed by the cluster manager.", "isOptional": true, "name": "maxFailedTasksPerExecutor"}], "innerTypes": [{"key": "PermissiveDict.261"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.262", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.170"}, "description": null, "isOptional": true, "name": "app"}, {"configType": {"key": "PermissiveDict.263"}, "description": null, "isOptional": true, "name": "blacklist"}, {"configType": {"key": "PermissiveDict.245"}, "description": null, "isOptional": true, "name": "blockManager"}, {"configType": {"key": "PermissiveDict.218"}, "description": null, "isOptional": true, "name": "broadcast"}, {"configType": {"key": "PermissiveDict.236"}, "description": null, "isOptional": true, "name": "cleaner"}, {"configType": {"key": "PermissiveDict.251"}, "description": null, "isOptional": true, "name": "core"}, {"configType": {"key": "PermissiveDict.252"}, "description": null, "isOptional": true, "name": "cores"}, {"configType": {"key": "PermissiveDict.237"}, "description": null, "isOptional": true, "name": "default"}, {"configType": {"key": "PermissiveDict.275"}, "description": null, "isOptional": true, "name": "deploy"}, {"configType": {"key": "PermissiveDict.172"}, "description": null, "isOptional": true, "name": "driver"}, {"configType": {"key": "PermissiveDict.268"}, "description": null, "isOptional": true, "name": "dynamicAllocation"}, {"configType": {"key": "PermissiveDict.202"}, "description": null, "isOptional": true, "name": "eventLog"}, {"configType": {"key": "PermissiveDict.177"}, "description": null, "isOptional": true, "name": "executor"}, {"configType": {"key": "String"}, "description": "Application Properties: A comma-separated list of classes that implement SparkListener; when initializing SparkContext, instances of these classes will be created and registered with Spark's listener bus. If a class has a single-argument constructor that accepts a SparkConf, that constructor will be called; otherwise, a zero-argument constructor will be called. If no valid constructor can be found, the SparkContext creation will fail with an exception.", "isOptional": true, "name": "extraListeners"}, {"configType": {"key": "PermissiveDict.185"}, "description": null, "isOptional": true, "name": "files"}, {"configType": {"key": "PermissiveDict.273"}, "description": null, "isOptional": true, "name": "graphx"}, {"configType": {"key": "PermissiveDict.241"}, "description": null, "isOptional": true, "name": "hadoop"}, {"configType": {"key": "PermissiveDict.223"}, "description": null, "isOptional": true, "name": "io"}, {"configType": {"key": "PermissiveDict.186"}, "description": null, "isOptional": true, "name": "jars"}, {"configType": {"key": "PermissiveDict.224"}, "description": null, "isOptional": true, "name": "kryo"}, {"configType": {"key": "PermissiveDict.226"}, "description": null, "isOptional": true, "name": "kryoserializer"}, {"configType": {"key": "PermissiveDict.178"}, "description": null, "isOptional": true, "name": "local"}, {"configType": {"key": "PermissiveDict.254"}, "description": null, "isOptional": true, "name": "locality"}, {"configType": {"key": "PermissiveDict.180"}, "description": null, "isOptional": true, "name": "log"}, {"configType": {"key": "Bool"}, "description": "Application Properties: Logs the effective SparkConf as INFO when a SparkContext is started.", "isOptional": true, "name": "logConf"}, {"configType": {"key": "String"}, "description": "Application Properties: The cluster manager to connect to. See the list of allowed master URL's.", "isOptional": true, "name": "master"}, {"configType": {"key": "Int"}, "description": "Shuffle Behavior: The remote block will be fetched to disk when size of the block is above this threshold in bytes. This is to avoid a giant request that takes too much memory. By default, this is only enabled for blocks > 2GB, as those cannot be fetched directly into memory, no matter what resources are available. But it can be turned down to a much lower value (eg. 200m) to avoid using too much memory on smaller blocks as well. Note this configuration will affect both shuffle fetch and block manager remote block fetch. For users who enabled external shuffle service, this feature can only be used when external shuffle service is newer than Spark 2.2.", "isOptional": true, "name": "maxRemoteBlockSizeFetchToMem"}, {"configType": {"key": "PermissiveDict.230"}, "description": null, "isOptional": true, "name": "memory"}, {"configType": {"key": "PermissiveDict.246"}, "description": null, "isOptional": true, "name": "network"}, {"configType": {"key": "PermissiveDict.247"}, "description": null, "isOptional": true, "name": "port"}, {"configType": {"key": "PermissiveDict.188"}, "description": null, "isOptional": true, "name": "pyspark"}, {"configType": {"key": "PermissiveDict.184"}, "description": null, "isOptional": true, "name": "python"}, {"configType": {"key": "PermissiveDict.271"}, "description": null, "isOptional": true, "name": "r"}, {"configType": {"key": "PermissiveDict.227"}, "description": null, "isOptional": true, "name": "rdd"}, {"configType": {"key": "PermissiveDict.181"}, "description": null, "isOptional": true, "name": "redaction"}, {"configType": {"key": "PermissiveDict.189"}, "description": null, "isOptional": true, "name": "reducer"}, {"configType": {"key": "PermissiveDict.244"}, "description": null, "isOptional": true, "name": "rpc"}, {"configType": {"key": "PermissiveDict.258"}, "description": null, "isOptional": true, "name": "scheduler"}, {"configType": {"key": "PermissiveDict.228"}, "description": null, "isOptional": true, "name": "serializer"}, {"configType": {"key": "PermissiveDict.198"}, "description": null, "isOptional": true, "name": "shuffle"}, {"configType": {"key": "PermissiveDict.264"}, "description": null, "isOptional": true, "name": "speculation"}, {"configType": {"key": "PermissiveDict.209"}, "description": null, "isOptional": true, "name": "sql"}, {"configType": {"key": "PermissiveDict.267"}, "description": null, "isOptional": true, "name": "stage"}, {"configType": {"key": "PermissiveDict.232"}, "description": null, "isOptional": true, "name": "storage"}, {"configType": {"key": "PermissiveDict.217"}, "description": null, "isOptional": true, "name": "streaming"}, {"configType": {"key": "PermissiveDict.179"}, "description": null, "isOptional": true, "name": "submit"}, {"configType": {"key": "PermissiveDict.266"}, "description": null, "isOptional": true, "name": "task"}, {"configType": {"key": "PermissiveDict.205"}, "description": null, "isOptional": true, "name": "ui"}, {"configType": {"key": "PermissiveDict.207"}, "description": null, "isOptional": true, "name": "worker"}], "innerTypes": [{"key": "PermissiveDict.231"}, {"key": "PermissiveDict.249"}, {"key": "PermissiveDict.175"}, {"key": "PermissiveDict.232"}, {"key": "PermissiveDict.250"}, {"key": "PermissiveDict.251"}, {"key": "PermissiveDict.265"}, {"key": "PermissiveDict.233"}, {"key": "PermissiveDict.266"}, {"key": "PermissiveDict.252"}, {"key": "PermissiveDict.177"}, {"key": "PermissiveDict.234"}, {"key": "PermissiveDict.267"}, {"key": "PermissiveDict.235"}, {"key": "PermissiveDict.253"}, {"key": "PermissiveDict.236"}, {"key": "PermissiveDict.254"}, {"key": "PermissiveDict.178"}, {"key": "PermissiveDict.179"}, {"key": "PermissiveDict.237"}, {"key": "PermissiveDict.268"}, {"key": "PermissiveDict.181"}, {"key": "PermissiveDict.255"}, {"key": "PermissiveDict.180"}, {"key": "PermissiveDict.238"}, {"key": "PermissiveDict.256"}, {"key": "PermissiveDict.269"}, {"key": "PermissiveDict.239"}, {"key": "PermissiveDict.170"}, {"key": "PermissiveDict.257"}, {"key": "PermissiveDict.176"}, {"key": "PermissiveDict.270"}, {"key": "PermissiveDict.240"}, {"key": "PermissiveDict.258"}, {"key": "PermissiveDict.241"}, {"key": "PermissiveDict.271"}, {"key": "PermissiveDict.242"}, {"key": "PermissiveDict.187"}, {"key": "PermissiveDict.259"}, {"key": "PermissiveDict.272"}, {"key": "PermissiveDict.182"}, {"key": "PermissiveDict.273"}, {"key": "PermissiveDict.171"}, {"key": "PermissiveDict.243"}, {"key": "PermissiveDict.260"}, {"key": "PermissiveDict.173"}, {"key": "PermissiveDict.183"}, {"key": "PermissiveDict.244"}, {"key": "PermissiveDict.274"}, {"key": "PermissiveDict.184"}, {"key": "PermissiveDict.261"}, {"key": "PermissiveDict.172"}, {"key": "PermissiveDict.275"}, {"key": "PermissiveDict.245"}, {"key": "PermissiveDict.262"}, {"key": "PermissiveDict.246"}, {"key": "PermissiveDict.185"}, {"key": "PermissiveDict.263"}, {"key": "PermissiveDict.174"}, {"key": "PermissiveDict.247"}, {"key": "PermissiveDict.186"}, {"key": "PermissiveDict.248"}, {"key": "PermissiveDict.264"}, {"key": "PermissiveDict.188"}, {"key": "PermissiveDict.201"}, {"key": "PermissiveDict.216"}, {"key": "PermissiveDict.189"}, {"key": "PermissiveDict.202"}, {"key": "PermissiveDict.217"}, {"key": "PermissiveDict.203"}, {"key": "PermissiveDict.190"}, {"key": "PermissiveDict.218"}, {"key": "PermissiveDict.204"}, {"key": "PermissiveDict.219"}, {"key": "PermissiveDict.220"}, {"key": "PermissiveDict.191"}, {"key": "PermissiveDict.205"}, {"key": "PermissiveDict.221"}, {"key": "PermissiveDict.222"}, {"key": "PermissiveDict.206"}, {"key": "PermissiveDict.223"}, {"key": "PermissiveDict.192"}, {"key": "PermissiveDict.207"}, {"key": "PermissiveDict.193"}, {"key": "PermissiveDict.208"}, {"key": "PermissiveDict.197"}, {"key": "PermissiveDict.194"}, {"key": "PermissiveDict.224"}, {"key": "PermissiveDict.209"}, {"key": "PermissiveDict.196"}, {"key": "PermissiveDict.210"}, {"key": "PermissiveDict.225"}, {"key": "PermissiveDict.226"}, {"key": "PermissiveDict.195"}, {"key": "PermissiveDict.211"}, {"key": "PermissiveDict.227"}, {"key": "Bool"}, {"key": "Float"}, {"key": "Int"}, {"key": "PermissiveDict.198"}, {"key": "PermissiveDict.212"}, {"key": "PermissiveDict.228"}, {"key": "String"}, {"key": "PermissiveDict.213"}, {"key": "PermissiveDict.199"}, {"key": "PermissiveDict.229"}, {"key": "PermissiveDict.200"}, {"key": "PermissiveDict.214"}, {"key": "PermissiveDict.230"}, {"key": "PermissiveDict.215"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.276", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Default timeout for all network interactions. This config will be used in place of spark.core.connection.ack.wait.timeout, spark.storage.blockManagerSlaveTimeoutMs, spark.shuffle.io.connectionTimeout, spark.rpc.askTimeout or spark.rpc.lookupTimeout if they are not configured.", "isOptional": true, "name": "timeout"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.246", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.276"}, "description": null, "isOptional": true, "name": "spark"}], "innerTypes": [{"key": "PermissiveDict.231"}, {"key": "PermissiveDict.249"}, {"key": "PermissiveDict.175"}, {"key": "PermissiveDict.250"}, {"key": "PermissiveDict.232"}, {"key": "PermissiveDict.251"}, {"key": "PermissiveDict.265"}, {"key": "PermissiveDict.233"}, {"key": "PermissiveDict.266"}, {"key": "PermissiveDict.252"}, {"key": "PermissiveDict.177"}, {"key": "PermissiveDict.267"}, {"key": "PermissiveDict.234"}, {"key": "PermissiveDict.235"}, {"key": "PermissiveDict.253"}, {"key": "PermissiveDict.236"}, {"key": "PermissiveDict.254"}, {"key": "PermissiveDict.178"}, {"key": "PermissiveDict.179"}, {"key": "PermissiveDict.237"}, {"key": "PermissiveDict.268"}, {"key": "PermissiveDict.181"}, {"key": "PermissiveDict.255"}, {"key": "PermissiveDict.180"}, {"key": "PermissiveDict.238"}, {"key": "PermissiveDict.269"}, {"key": "PermissiveDict.256"}, {"key": "PermissiveDict.239"}, {"key": "PermissiveDict.170"}, {"key": "PermissiveDict.257"}, {"key": "PermissiveDict.176"}, {"key": "PermissiveDict.270"}, {"key": "PermissiveDict.240"}, {"key": "PermissiveDict.258"}, {"key": "PermissiveDict.241"}, {"key": "PermissiveDict.271"}, {"key": "PermissiveDict.242"}, {"key": "PermissiveDict.187"}, {"key": "PermissiveDict.259"}, {"key": "PermissiveDict.272"}, {"key": "PermissiveDict.182"}, {"key": "PermissiveDict.273"}, {"key": "PermissiveDict.171"}, {"key": "PermissiveDict.243"}, {"key": "PermissiveDict.260"}, {"key": "PermissiveDict.173"}, {"key": "PermissiveDict.183"}, {"key": "PermissiveDict.244"}, {"key": "PermissiveDict.274"}, {"key": "PermissiveDict.184"}, {"key": "PermissiveDict.261"}, {"key": "PermissiveDict.172"}, {"key": "PermissiveDict.275"}, {"key": "PermissiveDict.245"}, {"key": "PermissiveDict.262"}, {"key": "PermissiveDict.276"}, {"key": "PermissiveDict.246"}, {"key": "PermissiveDict.185"}, {"key": "PermissiveDict.263"}, {"key": "PermissiveDict.174"}, {"key": "PermissiveDict.247"}, {"key": "PermissiveDict.186"}, {"key": "PermissiveDict.264"}, {"key": "PermissiveDict.248"}, {"key": "PermissiveDict.188"}, {"key": "PermissiveDict.201"}, {"key": "PermissiveDict.216"}, {"key": "PermissiveDict.189"}, {"key": "PermissiveDict.202"}, {"key": "PermissiveDict.217"}, {"key": "PermissiveDict.203"}, {"key": "PermissiveDict.190"}, {"key": "PermissiveDict.218"}, {"key": "PermissiveDict.204"}, {"key": "PermissiveDict.219"}, {"key": "PermissiveDict.220"}, {"key": "PermissiveDict.191"}, {"key": "PermissiveDict.205"}, {"key": "PermissiveDict.221"}, {"key": "PermissiveDict.222"}, {"key": "PermissiveDict.206"}, {"key": "PermissiveDict.223"}, {"key": "PermissiveDict.192"}, {"key": "PermissiveDict.207"}, {"key": "PermissiveDict.193"}, {"key": "PermissiveDict.208"}, {"key": "PermissiveDict.197"}, {"key": "PermissiveDict.194"}, {"key": "PermissiveDict.224"}, {"key": "PermissiveDict.209"}, {"key": "PermissiveDict.196"}, {"key": "PermissiveDict.210"}, {"key": "PermissiveDict.225"}, {"key": "PermissiveDict.226"}, {"key": "PermissiveDict.195"}, {"key": "PermissiveDict.211"}, {"key": "PermissiveDict.227"}, {"key": "Bool"}, {"key": "Float"}, {"key": "Int"}, {"key": "PermissiveDict.198"}, {"key": "PermissiveDict.212"}, {"key": "PermissiveDict.228"}, {"key": "String"}, {"key": "PermissiveDict.213"}, {"key": "PermissiveDict.199"}, {"key": "PermissiveDict.229"}, {"key": "PermissiveDict.200"}, {"key": "PermissiveDict.214"}, {"key": "PermissiveDict.230"}, {"key": "PermissiveDict.215"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.277", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Execution Behavior: Communication timeout to use when fetching files added through SparkContext.addFile() from the driver.", "isOptional": true, "name": "fetchTimeout"}, {"configType": {"key": "Int"}, "description": "Execution Behavior: The maximum number of bytes to pack into a single partition when reading files.", "isOptional": true, "name": "maxPartitionBytes"}, {"configType": {"key": "Int"}, "description": "Execution Behavior: The estimated cost to open a file, measured by the number of bytes could be scanned at the same time. This is used when putting multiple files into a partition. It is better to overestimate, then the partitions with small files will be faster than partitions with bigger files.", "isOptional": true, "name": "openCostInBytes"}, {"configType": {"key": "Bool"}, "description": "Execution Behavior: Whether to overwrite files added through SparkContext.addFile() when the target file exists and its contents do not match those of the source.", "isOptional": true, "name": "overwrite"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Comma-separated list of files to be placed in the working directory of each executor. Globs are allowed.", "isOptional": true, "name": "root"}, {"configType": {"key": "Bool"}, "description": "Execution Behavior: If set to true (default), file fetching will use a local cache that is shared by executors that belong to the same application, which can improve task launching performance when running many executors on the same host. If set to false, these caching optimizations will be disabled and all executors will fetch their own copies of files. This optimization may be disabled in order to use Spark local directories that reside on NFS filesystems (see SPARK-6313 for more details).", "isOptional": true, "name": "useFetchCache"}], "innerTypes": [{"key": "Int"}, {"key": "Bool"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.185", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.262"}, "description": null, "isOptional": true, "name": "application"}, {"configType": {"key": "String"}, "description": "Scheduling: If set to \"true\", prevent Spark from scheduling tasks on executors that have been blacklisted due to too many task failures. The blacklisting algorithm can be further controlled by the other \"spark.blacklist\" configuration options.", "isOptional": true, "name": "enabled"}, {"configType": {"key": "String"}, "description": "Scheduling: (Experimental) If set to \"true\", allow Spark to automatically kill the executors when they are blacklisted on fetch failure or blacklisted for the entire application, as controlled by spark.blacklist.application.*. Note that, when an entire node is added to the blacklist, all of the executors on that node will be killed.", "isOptional": true, "name": "killBlacklistedExecutors"}, {"configType": {"key": "PermissiveDict.260"}, "description": null, "isOptional": true, "name": "stage"}, {"configType": {"key": "PermissiveDict.259"}, "description": null, "isOptional": true, "name": "task"}, {"configType": {"key": "String"}, "description": "Scheduling: (Experimental) How long a node or executor is blacklisted for the entire application, before it is unconditionally removed from the blacklist to attempt running new tasks.", "isOptional": true, "name": "timeout"}], "innerTypes": [{"key": "PermissiveDict.259"}, {"key": "PermissiveDict.261"}, {"key": "String"}, {"key": "PermissiveDict.262"}, {"key": "PermissiveDict.260"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.263", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Runtime Environment: Set the time interval by which the executor logs will be rolled over. Rolling is disabled by default. Valid values are daily, hourly, minutely or any interval in seconds. See spark.executor.logs.rolling.maxRetainedFiles for automatic cleaning of old logs.", "isOptional": true, "name": "interval"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.174", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: Maximum number of retries when binding to a port before giving up. When a port is given a specific value (non 0), each subsequent retry will increment the port used in the previous attempt by 1 before retrying. This essentially allows it to try a range of ports from the start port specified to port + maxRetries.", "isOptional": true, "name": "maxRetries"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.247", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Runtime Environment: Comma-separated list of groupId:artifactId, to exclude while resolving the dependencies provided in spark.jars.packages to avoid dependency conflicts.", "isOptional": true, "name": "excludes"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Path to specify the Ivy user directory, used for the local Ivy cache and package files from spark.jars.packages. This will override the Ivy property ivy.default.ivy.user.dir which defaults to ~/.ivy2.", "isOptional": true, "name": "ivy"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Path to an Ivy settings file to customize resolution of jars specified using spark.jars.packages instead of the built-in defaults, such as maven central. Additional repositories given by the command-line option --repositories or spark.jars.repositories will also be included. Useful for allowing Spark to resolve artifacts from behind a firewall e.g. via an in-house artifact server like Artifactory. Details on the settings file format can be found at http://ant.apache.org/ivy/history/latest-milestone/settings.html", "isOptional": true, "name": "ivySettings"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Comma-separated list of Maven coordinates of jars to include on the driver and executor classpaths. The coordinates should be groupId:artifactId:version. If spark.jars.ivySettings is given artifacts will be resolved according to the configuration in the file, otherwise artifacts will be searched for in the local maven repo, then maven central and finally any additional remote repositories given by the command-line option --repositories. For more details, see Advanced Dependency Management.", "isOptional": true, "name": "packages"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Comma-separated list of additional remote repositories to search for the maven coordinates given with --packages or spark.jars.packages.", "isOptional": true, "name": "repositories"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Comma-separated list of jars to include on the driver and executor classpaths. Globs are allowed.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.186", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Networking: How long for the connection to wait for ack to occur before timing out and giving up. To avoid unwilling timeout caused by long pause like GC, you can set larger value.", "isOptional": true, "name": "timeout"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.248", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Scheduling: How often Spark will check for tasks to speculate.", "isOptional": true, "name": "interval"}, {"configType": {"key": "String"}, "description": "Scheduling: How many times slower a task is than the median to be considered for speculation.", "isOptional": true, "name": "multiplier"}, {"configType": {"key": "String"}, "description": "Scheduling: Fraction of tasks which must be complete before speculation is enabled for a particular stage.", "isOptional": true, "name": "quantile"}, {"configType": {"key": "String"}, "description": "Scheduling: If set to \"true\", performs speculative execution of tasks. This means if one or more tasks are running slowly in a stage, they will be re-launched.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.264", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.187"}, "description": null, "isOptional": true, "name": "driver"}, {"configType": {"key": "String"}, "description": "Runtime Environment: Python binary executable to use for PySpark in both driver and executors.", "isOptional": true, "name": "python"}], "innerTypes": [{"key": "PermissiveDict.187"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.188", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: Buffer size to use when writing to output streams, in KiB unless otherwise specified.", "isOptional": true, "name": "kb"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.201", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.215"}, "description": null, "isOptional": true, "name": "writeAheadLog"}], "innerTypes": [{"key": "PermissiveDict.215"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.216", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Shuffle Behavior: This configuration limits the number of remote blocks being fetched per reduce task from a given host port. When a large number of blocks are being requested from a given address in a single fetch or simultaneously, this could crash the serving executor or Node Manager. This is especially useful to reduce the load on the Node Manager when external shuffle is enabled. You can mitigate this issue by setting it to a lower value.", "isOptional": true, "name": "maxBlocksInFlightPerAddress"}, {"configType": {"key": "Int"}, "description": "Shuffle Behavior: This configuration limits the number of remote requests to fetch blocks at any given point. When the number of hosts in the cluster increase, it might lead to very large number of inbound connections to one or more nodes, causing the workers to fail under load. By allowing it to limit the number of fetch requests, this scenario can be mitigated.", "isOptional": true, "name": "maxReqsInFlight"}, {"configType": {"key": "String"}, "description": "Shuffle Behavior: Maximum size of map outputs to fetch simultaneously from each reduce task, in MiB unless otherwise specified. Since each output requires us to create a buffer to receive it, this represents a fixed memory overhead per reduce task, so keep it small unless you have a large amount of memory.", "isOptional": true, "name": "maxSizeInFlight"}], "innerTypes": [{"key": "Int"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.189", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.201"}, "description": null, "isOptional": true, "name": "buffer"}, {"configType": {"key": "String"}, "description": "Spark UI: Whether to compress logged events, if spark.eventLog.enabled is true. Compression will use spark.io.compression.codec.", "isOptional": true, "name": "compress"}, {"configType": {"key": "String"}, "description": "Spark UI: Base directory in which Spark events are logged, if spark.eventLog.enabled is true. Within this base directory, Spark creates a sub-directory for each application, and logs the events specific to the application in this directory. Users may want to set this to a unified location like an HDFS directory so history files can be read by the history server.", "isOptional": true, "name": "dir"}, {"configType": {"key": "String"}, "description": "Spark UI: Whether to log Spark events, useful for reconstructing the Web UI after the application has finished.", "isOptional": true, "name": "enabled"}, {"configType": {"key": "PermissiveDict.199"}, "description": null, "isOptional": true, "name": "logBlockUpdates"}, {"configType": {"key": "PermissiveDict.200"}, "description": null, "isOptional": true, "name": "longForm"}, {"configType": {"key": "String"}, "description": "Spark UI: Whether to overwrite any existing files.", "isOptional": true, "name": "overwrite"}], "innerTypes": [{"key": "PermissiveDict.200"}, {"key": "PermissiveDict.201"}, {"key": "PermissiveDict.199"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.202", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.211"}, "description": null, "isOptional": true, "name": "backpressure"}, {"configType": {"key": "String"}, "description": "Spark Streaming: Interval at which data received by Spark Streaming receivers is chunked into blocks of data before storing them in Spark. Minimum recommended - 50 ms. See the performance tuning section in the Spark Streaming programing guide for more details.", "isOptional": true, "name": "blockInterval"}, {"configType": {"key": "PermissiveDict.216"}, "description": null, "isOptional": true, "name": "driver"}, {"configType": {"key": "PermissiveDict.214"}, "description": null, "isOptional": true, "name": "kafka"}, {"configType": {"key": "PermissiveDict.213"}, "description": null, "isOptional": true, "name": "receiver"}, {"configType": {"key": "String"}, "description": "Spark Streaming: If true, Spark shuts down the StreamingContext gracefully on JVM shutdown rather than immediately.", "isOptional": true, "name": "stopGracefullyOnShutdown"}, {"configType": {"key": "PermissiveDict.210"}, "description": null, "isOptional": true, "name": "ui"}, {"configType": {"key": "String"}, "description": "Spark Streaming: Force RDDs generated and persisted by Spark Streaming to be automatically unpersisted from Spark's memory. The raw input data received by Spark Streaming is also automatically cleared. Setting this to false will allow the raw data and persisted RDDs to be accessible outside the streaming application as they will not be cleared automatically. But it comes at the cost of higher memory usage in Spark.", "isOptional": true, "name": "unpersist"}], "innerTypes": [{"key": "PermissiveDict.210"}, {"key": "PermissiveDict.212"}, {"key": "String"}, {"key": "PermissiveDict.216"}, {"key": "PermissiveDict.214"}, {"key": "PermissiveDict.211"}, {"key": "PermissiveDict.213"}, {"key": "PermissiveDict.215"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.217", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: How many DAG graph nodes the Spark UI and status APIs remember before garbage collecting.", "isOptional": true, "name": "retainedRootRDDs"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.203", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Shuffle Behavior: Size of the in-memory buffer for each shuffle file output stream, in KiB unless otherwise specified. These buffers reduce the number of disk seeks and system calls made in creating intermediate shuffle files.", "isOptional": true, "name": "buffer"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.190", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Execution Behavior: Size of each piece of a block for TorrentBroadcastFactory, in KiB unless otherwise specified. Too large a value decreases parallelism during broadcast (makes it slower); however, if it is too small, BlockManager might take a performance hit.", "isOptional": true, "name": "blockSize"}, {"configType": {"key": "String"}, "description": "Execution Behavior: Whether to enable checksum for broadcast. If enabled, broadcasts will include a checksum, which can help detect corrupted blocks, at the cost of computing and sending a little more data. It's possible to disable it if the network has other mechanisms to guarantee data won't be corrupted during broadcast.", "isOptional": true, "name": "checksum"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Whether to compress broadcast variables before sending them. Generally a good idea. Compression will use spark.io.compression.codec.", "isOptional": true, "name": "compress"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.218", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: How often to update live entities. -1 means \"never update\" when replaying applications, meaning only the last write will happen. For live applications, this avoids a few operations that we can live without when rapidly processing incoming task events.", "isOptional": true, "name": "period"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.204", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: Block size in bytes used in LZ4 compression, in the case when LZ4 compression codec is used. Lowering this block size will also lower shuffle memory usage when LZ4 is used.", "isOptional": true, "name": "blockSize"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.219", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: Block size in bytes used in Snappy compression, in the case when Snappy compression codec is used. Lowering this block size will also lower shuffle memory usage when Snappy is used.", "isOptional": true, "name": "blockSize"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.220", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Shuffle Behavior: (Netty only) Fetches that fail due to IO-related exceptions are automatically retried if this is set to a non-zero value. This retry logic helps stabilize large shuffles in the face of long GC pauses or transient network connectivity issues.", "isOptional": true, "name": "maxRetries"}, {"configType": {"key": "Int"}, "description": "Shuffle Behavior: (Netty only) Connections between hosts are reused in order to reduce connection buildup for large clusters. For clusters with many hard disks and few hosts, this may result in insufficient concurrency to saturate all disks, and so users may consider increasing this value.", "isOptional": true, "name": "numConnectionsPerPeer"}, {"configType": {"key": "Bool"}, "description": "Shuffle Behavior: (Netty only) Off-heap buffers are used to reduce garbage collection during shuffle and cache block transfer. For environments where off-heap memory is tightly limited, users may wish to turn this off to force all allocations from Netty to be on-heap.", "isOptional": true, "name": "preferDirectBufs"}, {"configType": {"key": "String"}, "description": "Shuffle Behavior: (Netty only) How long to wait between retries of fetches. The maximum delay caused by retrying is 15 seconds by default, calculated as maxRetries * retryWait.", "isOptional": true, "name": "retryWait"}], "innerTypes": [{"key": "Int"}, {"key": "Bool"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.191", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.203"}, "description": null, "isOptional": true, "name": "dagGraph"}, {"configType": {"key": "String"}, "description": "Spark UI: Whether to run the web UI for the Spark application.", "isOptional": true, "name": "enabled"}, {"configType": {"key": "String"}, "description": "Spark UI: Comma separated list of filter class names to apply to the Spark Web UI. The filter should be a standard javax servlet Filter. Filter parameters can also be specified in the configuration, by setting config entries of the form spark.<class name of filter>.param.<param name>=<value> For example: spark.ui.filters=com.test.filter1 spark.com.test.filter1.param.name1=foo spark.com.test.filter1.param.name2=bar", "isOptional": true, "name": "filters"}, {"configType": {"key": "String"}, "description": "Spark UI: Allows jobs and stages to be killed from the web UI.", "isOptional": true, "name": "killEnabled"}, {"configType": {"key": "PermissiveDict.204"}, "description": null, "isOptional": true, "name": "liveUpdate"}, {"configType": {"key": "String"}, "description": "Spark UI: Port for your application's dashboard, which shows memory and workload data.", "isOptional": true, "name": "port"}, {"configType": {"key": "String"}, "description": "Spark UI: How many dead executors the Spark UI and status APIs remember before garbage collecting.", "isOptional": true, "name": "retainedDeadExecutors"}, {"configType": {"key": "String"}, "description": "Spark UI: How many jobs the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances.", "isOptional": true, "name": "retainedJobs"}, {"configType": {"key": "String"}, "description": "Spark UI: How many stages the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances.", "isOptional": true, "name": "retainedStages"}, {"configType": {"key": "String"}, "description": "Spark UI: How many tasks the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances.", "isOptional": true, "name": "retainedTasks"}, {"configType": {"key": "String"}, "description": "Spark UI: Enable running Spark Master as reverse proxy for worker and application UIs. In this mode, Spark master will reverse proxy the worker and application UIs to enable access without requiring direct access to their hosts. Use it with caution, as worker and application UI will not be accessible directly, you will only be able to access them through spark master/proxy public URL. This setting affects all the workers and application UIs running in the cluster and must be set on all the workers, drivers and masters.", "isOptional": true, "name": "reverseProxy"}, {"configType": {"key": "String"}, "description": "Spark UI: This is the URL where your proxy is running. This URL is for proxy which is running in front of Spark Master. This is useful when running proxy for authentication e.g. OAuth proxy. Make sure this is a complete URL including scheme (http/https) and port to reach your proxy.", "isOptional": true, "name": "reverseProxyUrl"}, {"configType": {"key": "String"}, "description": "Spark UI: Show the progress bar in the console. The progress bar shows the progress of stages that run for longer than 500ms. If multiple stages run at the same time, multiple progress bars will be displayed on the same line.", "isOptional": true, "name": "showConsoleProgress"}], "innerTypes": [{"key": "PermissiveDict.203"}, {"key": "PermissiveDict.204"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.205", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: Buffer size in bytes used in Zstd compression, in the case when Zstd compression codec is used. Lowering this size will lower the shuffle memory usage when Zstd is used, but it might increase the compression cost because of excessive JNI call overhead.", "isOptional": true, "name": "bufferSize"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Compression level for Zstd compression codec. Increasing the compression level will result in better compression at the expense of more CPU and memory.", "isOptional": true, "name": "level"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.221", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: The codec used to compress internal data such as RDD partitions, event log, broadcast variables and shuffle outputs. By default, Spark provides four codecs: lz4, lzf, snappy, and zstd. You can also use fully qualified class names to specify the codec, e.g. org.apache.spark.io.LZ4CompressionCodec, org.apache.spark.io.LZFCompressionCodec, org.apache.spark.io.SnappyCompressionCodec, and org.apache.spark.io.ZStdCompressionCodec.", "isOptional": true, "name": "codec"}, {"configType": {"key": "PermissiveDict.219"}, "description": null, "isOptional": true, "name": "lz4"}, {"configType": {"key": "PermissiveDict.220"}, "description": null, "isOptional": true, "name": "snappy"}, {"configType": {"key": "PermissiveDict.221"}, "description": null, "isOptional": true, "name": "zstd"}], "innerTypes": [{"key": "PermissiveDict.219"}, {"key": "PermissiveDict.221"}, {"key": "PermissiveDict.220"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.222", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: How many finished drivers the Spark UI and status APIs remember before garbage collecting.", "isOptional": true, "name": "retainedDrivers"}, {"configType": {"key": "String"}, "description": "Spark UI: How many finished executors the Spark UI and status APIs remember before garbage collecting.", "isOptional": true, "name": "retainedExecutors"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.206", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.222"}, "description": null, "isOptional": true, "name": "compression"}], "innerTypes": [{"key": "PermissiveDict.219"}, {"key": "PermissiveDict.222"}, {"key": "PermissiveDict.220"}, {"key": "String"}, {"key": "PermissiveDict.221"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.223", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Shuffle Behavior: Cache entries limited to the specified memory footprint in bytes.", "isOptional": true, "name": "size"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.192", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.206"}, "description": null, "isOptional": true, "name": "ui"}], "innerTypes": [{"key": "PermissiveDict.206"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.207", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.192"}, "description": null, "isOptional": true, "name": "cache"}], "innerTypes": [{"key": "PermissiveDict.192"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.193", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: How many finished executions the Spark UI and status APIs remember before garbage collecting.", "isOptional": true, "name": "retainedExecutions"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.208", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Shuffle Behavior: When we fail to register to the external shuffle service, we will retry for maxAttempts times.", "isOptional": true, "name": "maxAttempts"}, {"configType": {"key": "Int"}, "description": "Shuffle Behavior: Timeout in milliseconds for registration to the external shuffle service.", "isOptional": true, "name": "timeout"}], "innerTypes": [{"key": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.197", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Shuffle Behavior: Enables the external shuffle service. This service preserves the shuffle files written by executors so the executors can be safely removed. This must be enabled if spark.dynamicAllocation.enabled is \"true\". The external shuffle service must be set up in order to enable it. See dynamic allocation configuration and setup documentation for more information.", "isOptional": true, "name": "enabled"}, {"configType": {"key": "PermissiveDict.193"}, "description": null, "isOptional": true, "name": "index"}, {"configType": {"key": "Int"}, "description": "Shuffle Behavior: Port on which the external shuffle service will run.", "isOptional": true, "name": "port"}], "innerTypes": [{"key": "Bool"}, {"key": "PermissiveDict.193"}, {"key": "Int"}, {"key": "String"}, {"key": "PermissiveDict.192"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.194", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: If you use Kryo serialization, give a comma-separated list of custom class names to register with Kryo. See the tuning guide for more details.", "isOptional": true, "name": "classesToRegister"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Whether to track references to the same object when serializing data with Kryo, which is necessary if your object graphs have loops and useful for efficiency if they contain multiple copies of the same object. Can be disabled to improve performance if you know this is not the case.", "isOptional": true, "name": "referenceTracking"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Whether to require registration with Kryo. If set to 'true', Kryo will throw an exception if an unregistered class is serialized. If set to false (the default), Kryo will write unregistered class names along with each object. Writing class names can cause significant performance overhead, so enabling this option can enforce strictly that a user has not omitted classes from registration.", "isOptional": true, "name": "registrationRequired"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: If you use Kryo serialization, give a comma-separated list of classes that register your custom classes with Kryo. This property is useful if you need to register your classes in a custom way, e.g. to specify a custom field serializer. Otherwise spark.kryo.classesToRegister is simpler. It should be set to classes that extend KryoRegistrator. See the tuning guide for more details.", "isOptional": true, "name": "registrator"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Whether to use unsafe based Kryo serializer. Can be substantially faster by using Unsafe Based IO.", "isOptional": true, "name": "unsafe"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.224", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.208"}, "description": null, "isOptional": true, "name": "ui"}], "innerTypes": [{"key": "PermissiveDict.208"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.209", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Shuffle Behavior: Whether to compress data spilled during shuffles. Compression will use spark.io.compression.codec.", "isOptional": true, "name": "compress"}], "innerTypes": [{"key": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.196", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark Streaming: How many batches the Spark Streaming UI and status APIs remember before garbage collecting.", "isOptional": true, "name": "retainedBatches"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.210", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: Maximum allowable size of Kryo serialization buffer, in MiB unless otherwise specified. This must be larger than any object you attempt to serialize and must be less than 2048m. Increase this if you get a \"buffer limit exceeded\" exception inside Kryo.", "isOptional": true, "name": "max"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Initial size of Kryo's serialization buffer, in KiB unless otherwise specified. Note that there will be one buffer per core on each worker. This buffer will grow up to spark.kryoserializer.buffer.max if needed.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.225", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "PermissiveDict.225"}, "description": null, "isOptional": true, "name": "buffer"}], "innerTypes": [{"key": "PermissiveDict.225"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.226", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Shuffle Behavior: (Advanced) In the sort-based shuffle manager, avoid merge-sorting data if there is no map-side aggregation and there are at most this many reduce partitions.", "isOptional": true, "name": "bypassMergeThreshold"}], "innerTypes": [{"key": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.195", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark Streaming: Enables or disables Spark Streaming's internal backpressure mechanism (since 1.5). This enables the Spark Streaming to control the receiving rate based on the current batch scheduling delays and processing times so that the system receives only as fast as the system can process. Internally, this dynamically sets the maximum receiving rate of receivers. This rate is upper bounded by the values spark.streaming.receiver.maxRate and spark.streaming.kafka.maxRatePerPartition if they are set (see below).", "isOptional": true, "name": "enabled"}, {"configType": {"key": "String"}, "description": "Spark Streaming: This is the initial maximum receiving rate at which each receiver will receive data for the first batch when the backpressure mechanism is enabled.", "isOptional": true, "name": "initialRate"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.211", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: Whether to compress serialized RDD partitions (e.g. for StorageLevel.MEMORY_ONLY_SER in Java and Scala or StorageLevel.MEMORY_ONLY in Python). Can save substantial space at the cost of some extra CPU time. Compression will use spark.io.compression.codec.", "isOptional": true, "name": "compress"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.227", "name": null}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Bool", "name": "Bool"}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Float", "name": "Float"}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Int", "name": "Int"}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Path", "name": "Path"}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "Shuffle Behavior: Threshold in bytes above which the size of shuffle blocks in HighlyCompressedMapStatus is accurately recorded. This helps to prevent OOM by avoiding underestimating shuffle block size when fetch shuffle blocks.", "isOptional": true, "name": "accurateBlockThreshold"}, {"configType": {"key": "Bool"}, "description": "Shuffle Behavior: Whether to compress map output files. Generally a good idea. Compression will use spark.io.compression.codec.", "isOptional": true, "name": "compress"}, {"configType": {"key": "PermissiveDict.190"}, "description": null, "isOptional": true, "name": "file"}, {"configType": {"key": "PermissiveDict.191"}, "description": null, "isOptional": true, "name": "io"}, {"configType": {"key": "Int"}, "description": "Shuffle Behavior: The max number of chunks allowed to be transferred at the same time on shuffle service. Note that new incoming connections will be closed when the max number is hit. The client will retry according to the shuffle retry configs (see spark.shuffle.io.maxRetries and spark.shuffle.io.retryWait), if those limits are reached the task will fail with fetch failure.", "isOptional": true, "name": "maxChunksBeingTransferred"}, {"configType": {"key": "Float"}, "description": "Memory Management: (deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of Java heap to use for aggregation and cogroups during shuffles. At any given time, the collective size of all in-memory maps used for shuffles is bounded by this limit, beyond which the contents will begin to spill to disk. If spills are often, consider increasing this value at the expense of spark.storage.memoryFraction.", "isOptional": true, "name": "memoryFraction"}, {"configType": {"key": "PermissiveDict.197"}, "description": null, "isOptional": true, "name": "registration"}, {"configType": {"key": "PermissiveDict.194"}, "description": null, "isOptional": true, "name": "service"}, {"configType": {"key": "PermissiveDict.195"}, "description": null, "isOptional": true, "name": "sort"}, {"configType": {"key": "PermissiveDict.196"}, "description": null, "isOptional": true, "name": "spill"}], "innerTypes": [{"key": "Bool"}, {"key": "Float"}, {"key": "PermissiveDict.193"}, {"key": "PermissiveDict.190"}, {"key": "Int"}, {"key": "PermissiveDict.197"}, {"key": "String"}, {"key": "PermissiveDict.194"}, {"key": "PermissiveDict.195"}, {"key": "PermissiveDict.192"}, {"key": "PermissiveDict.196"}, {"key": "PermissiveDict.191"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.198", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark Streaming: Whether to close the file after writing a write-ahead log record on the receivers. Set this to 'true' when you want to use S3 (or any file system that does not support flushing) for the data WAL on the receivers.", "isOptional": true, "name": "closeFileAfterWrite"}, {"configType": {"key": "String"}, "description": "Spark Streaming: Enable write-ahead logs for receivers. All the input data received through receivers will be saved to write-ahead logs that will allow it to be recovered after driver failures. See the deployment guide in the Spark Streaming programing guide for more details.", "isOptional": true, "name": "enable"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.212", "name": null}, {"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "String", "name": "String"}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Compression and Serialization: When serializing using org.apache.spark.serializer.JavaSerializer, the serializer caches objects to prevent writing redundant data, however that stops garbage collection of those objects. By calling 'reset' you flush that info from the serializer, and allow old objects to be collected. To turn off this periodic reset set it to -1. By default it will reset the serializer every 100 objects.", "isOptional": true, "name": "objectStreamReset"}, {"configType": {"key": "String"}, "description": "Compression and Serialization: Class to use for serializing objects that will be sent over the network or need to be cached in serialized form. The default of Java serialization works with any Serializable Java object but is quite slow, so we recommend using org.apache.spark.serializer.KryoSerializer and configuring Kryo serialization when speed is necessary. Can be any subclass of org.apache.spark.Serializer.", "isOptional": true, "name": "root"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.228", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark Streaming: Maximum rate (number of records per second) at which each receiver will receive data. Effectively, each stream will consume at most this number of records per second. Setting this configuration to 0 or a negative number will put no limit on the rate. See the deployment guide in the Spark Streaming programing guide for mode details.", "isOptional": true, "name": "maxRate"}, {"configType": {"key": "PermissiveDict.212"}, "description": null, "isOptional": true, "name": "writeAheadLog"}], "innerTypes": [{"key": "PermissiveDict.212"}, {"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.213", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: Whether to log events for every block update, if spark.eventLog.enabled is true. *Warning*: This will increase the size of the event log considerably.", "isOptional": true, "name": "enabled"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.199", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": "Memory Management: If true, Spark will attempt to use off-heap memory for certain operations. If off-heap memory use is enabled, then spark.memory.offHeap.size must be positive.", "isOptional": true, "name": "enabled"}, {"configType": {"key": "Int"}, "description": "Memory Management: The absolute amount of memory in bytes which can be used for off-heap allocation. This setting has no impact on heap memory usage, so if your executors' total memory consumption must fit within some hard limit then be sure to shrink your JVM heap size accordingly. This must be set to a positive value when spark.memory.offHeap.enabled=true.", "isOptional": true, "name": "size"}], "innerTypes": [{"key": "Int"}, {"key": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.229", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark UI: If true, use the long form of call sites in the event log. Otherwise use the short form.", "isOptional": true, "name": "enabled"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.200", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark Streaming: Maximum rate (number of records per second) at which data will be read from each Kafka partition when using the new Kafka direct stream API. See the Kafka Integration guide for more details.", "isOptional": true, "name": "maxRatePerPartition"}, {"configType": {"key": "String"}, "description": "Spark Streaming: Maximum number of consecutive retries the driver will make in order to find the latest offsets on the leader of each partition (a default value of 1 means that the driver will make a maximum of 2 attempts). Only applies to the new Kafka direct stream API.", "isOptional": true, "name": "maxRetries"}, {"configType": {"key": "String"}, "description": "Spark Streaming: Minimum rate (number of records per second) at which data will be read from each Kafka partition when using the new Kafka direct stream API.", "isOptional": true, "name": "minRatePerPartition"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.214", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Float"}, "description": "Memory Management: Fraction of (heap space - 300MB) used for execution and storage. The lower this is, the more frequently spills and cached data eviction occur. The purpose of this config is to set aside memory for internal metadata, user data structures, and imprecise size estimation in the case of sparse, unusually large records. Leaving this at the default value is recommended. For more detail, including important information about correctly tuning JVM garbage collection when increasing this value, see this description.", "isOptional": true, "name": "fraction"}, {"configType": {"key": "PermissiveDict.229"}, "description": null, "isOptional": true, "name": "offHeap"}, {"configType": {"key": "Float"}, "description": "Memory Management: Amount of storage memory immune to eviction, expressed as a fraction of the size of the region set aside by spark.memory.fraction. The higher this is, the less working memory may be available to execution and tasks may spill to disk more often. Leaving this at the default value is recommended. For more detail, see this description.", "isOptional": true, "name": "storageFraction"}, {"configType": {"key": "Bool"}, "description": "Memory Management: Whether to enable the legacy memory management mode used in Spark 1.5 and before. The legacy mode rigidly partitions the heap space into fixed-size regions, potentially leading to excessive spilling if the application was not tuned. The following deprecated memory fraction configurations are not read unless this is enabled: spark.shuffle.memoryFraction spark.storage.memoryFraction spark.storage.unrollFraction", "isOptional": true, "name": "useLegacyMode"}], "innerTypes": [{"key": "Int"}, {"key": "Bool"}, {"key": "PermissiveDict.229"}, {"key": "Float"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.230", "name": null}, {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "Spark Streaming: Whether to close the file after writing a write-ahead log record on the driver. Set this to 'true' when you want to use S3 (or any file system that does not support flushing) for the metadata WAL on the driver.", "isOptional": true, "name": "closeFileAfterWrite"}], "innerTypes": [{"key": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "PermissiveDict.215", "name": null}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.278", "name": null}}, "description": "Ingest events from JSON to Parquet", "inputDefinitions": [{"description": null, "name": "spark_inputs", "type": {"description": null, "displayName": "[Path]", "name": null}}], "metadata": [{"key": "kind", "value": "spark"}, {"key": "main_class", "value": "io.dagster.events.EventPipeline"}], "name": "event_ingest", "outputDefinitions": [{"description": null, "name": "paths", "type": {"description": null, "displayName": "[Path]", "name": null}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "event_ingest_pipeline"}, "solidHandle": {"handleID": "event_ingest"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid is backed by the notebook at /Users/alangenfeld/dagster/examples/dagster_examples/airline_demo/notebooks/Fares_vs_Delays.ipynb", "inputDefinitions": [{"description": "The SQL table to use for calcuations.", "name": "table_name", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "metadata": [{"key": "notebook_path", "value": "/Users/alangenfeld/dagster/examples/dagster_examples/airline_demo/notebooks/Fares_vs_Delays.ipynb"}, {"key": "kind", "value": "ipynb"}], "name": "fares_vs_delays", "outputDefinitions": [{"description": "The path to the saved PDF plots.", "name": "result", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "fares_vs_delays"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "The name of the bucket to upload to.", "isOptional": false, "name": "Bucket"}, {"configType": {"key": "String"}, "description": "The name of the key to upload to.", "isOptional": false, "name": "Key"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "String", "name": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.44", "name": null}}, "description": "Take a file handle and upload it to s3. Returns an S3FileHandle.", "inputDefinitions": [{"description": "The file to upload.", "name": "file_handle", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "metadata": [], "name": "file_handle_to_s3", "outputDefinitions": [{"description": null, "name": "s3_file_handle", "type": {"description": null, "displayName": "S3FileHandle", "name": "S3FileHandle"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "process_delays_by_geo.upload_delays_by_geography_pdf_plots"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "upload_delays_vs_fares_pdf_plots"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "upload_outbound_avg_delay_pdf_plots"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "List of [Int]", "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Int", "name": "Int"}], "isList": true, "isNullable": false, "isSelector": false, "key": "List.Int", "name": null}}, "description": null, "inputDefinitions": [], "metadata": [], "name": "giver", "outputDefinitions": [{"description": null, "name": "out_1", "type": {"description": null, "displayName": "[Int]", "name": null}}, {"description": null, "name": "out_2", "type": {"description": null, "displayName": "[Int]", "name": null}}, {"description": null, "name": "out_3", "type": {"description": null, "displayName": "[Int]", "name": null}}, {"description": null, "name": "out_4", "type": {"description": null, "displayName": "[Int]", "name": null}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "sleepy_pipeline"}, "solidHandle": {"handleID": "giver"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "gzip_file", "type": {"description": null, "displayName": "String", "name": "String"}}], "metadata": [], "name": "gunzipper", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "[String]", "name": null}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "event_ingest_pipeline"}, "solidHandle": {"handleID": "gunzipper"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Take a file handle that contains a csv with headers and load it\ninto a Spark DataFrame. It infers header names but does *not* infer schema.\n\nIt also ensures that the column names are valid parquet column names by\nfiltering out any of the following characters from column names:\n\nCharacters (within quotations): \"`[ ,;{}()\\n\\t=]`\"\n\n", "inputDefinitions": [{"description": null, "name": "csv_file_handle", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "metadata": [], "name": "ingest_csv_file_handle_to_spark", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "requiredResources": [{"resourceKey": "spark"}]}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "april_on_time_s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "june_on_time_s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "master_cord_s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "may_on_time_s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.s3_to_df.ingest_csv_file_handle_to_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "ingest_q2_sfo_weather"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Path"}, "description": "Path to the dbt executable to invoke, e.g., '/path/to/your/venv/bin/dbt'. Default: 'dbt'", "isOptional": true, "name": "dbt_executable"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Path", "name": "Path"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.281", "name": null}}, "description": null, "inputDefinitions": [], "metadata": [], "name": "jaffle_shop", "outputDefinitions": [{"description": null, "name": "run_complete", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "jaffle_pipeline"}, "solidHandle": {"handleID": "jaffle_shop"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Path"}, "description": "Path to the dbt executable to invoke, e.g., '/path/to/your/venv/bin/dbt'. Default: 'dbt'", "isOptional": true, "name": "dbt_executable"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Path", "name": "Path"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.282", "name": null}}, "description": null, "inputDefinitions": [{"description": null, "name": "test_start", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "metadata": [], "name": "jaffle_shop_test", "outputDefinitions": [{"description": null, "name": "test_complete", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "jaffle_pipeline"}, "solidHandle": {"handleID": "jaffle_shop_test"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": null, "isOptional": false, "name": "subsample_pct"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Int", "name": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.167", "name": null}}, "description": "\n    This solid takes April, May, and June data and coalesces it into a q2 data set.\n    It then joins the that origin and destination airport with the data in the\n    master_cord_data.\n    ", "inputDefinitions": [{"description": null, "name": "april_data", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}, {"description": null, "name": "may_data", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}, {"description": null, "name": "june_data", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}, {"description": null, "name": "master_cord_data", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "metadata": [], "name": "join_q2_data", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "join_q2_data"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "String"}, "description": "", "isOptional": false, "name": "table_name"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "String", "name": "String"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.164", "name": null}}, "description": null, "inputDefinitions": [{"description": null, "name": "data_frame", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "metadata": [], "name": "load_data_to_database_from_spark", "outputDefinitions": [{"description": null, "name": "table_name", "type": {"description": null, "displayName": "String", "name": "String"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.load_data_to_database_from_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.load_data_to_database_from_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.load_data_to_database_from_spark"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "load_q2_on_time_data"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "load_q2_sfo_weather"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "ranks", "type": {"description": null, "displayName": "SparkRDD", "name": "SparkRDD"}}], "metadata": [], "name": "log_ranks", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pyspark_pagerank"}, "solidHandle": {"handleID": "log_ranks"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This simulates a solid that would wrap something like dbt, where it emits a bunch of tables and then say an expectation on each table, all in one solid", "inputDefinitions": [{"description": null, "name": "start", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "metadata": [], "name": "many_materializations_and_passing_expectations", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "many_materializations_and_passing_expectations"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Load a bunch of raw tables from corresponding files", "inputDefinitions": [{"description": null, "name": "start", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "metadata": [], "name": "many_table_materializations", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "many_table_materializations"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "num_df", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "metadata": [], "name": "mult_solid", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline"}, "solidHandle": {"handleID": "mult_solid"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline_with_read_csv"}, "solidHandle": {"handleID": "mult_solid"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [], "metadata": [], "name": "no_in_two_out", "outputDefinitions": [{"description": null, "name": "output_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}, {"description": null, "name": "output_1", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "solid_a"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": null, "isOptional": false, "name": "return_wrong_type"}, {"configType": {"key": "Bool"}, "description": null, "isOptional": false, "name": "throw_in_solid"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Bool", "name": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.31", "name": null}}, "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "metadata": [], "name": "num_to_str", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "String", "name": "String"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "error_monster"}, "solidHandle": {"handleID": "middle"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "input_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "metadata": [], "name": "one_in_none_out", "outputDefinitions": [], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "solid_g"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "input_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "metadata": [], "name": "one_in_one_out", "outputDefinitions": [{"description": null, "name": "output_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "solid_b"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "solid_e"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "input_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "metadata": [], "name": "one_in_two_out", "outputDefinitions": [{"description": null, "name": "output_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}, {"description": null, "name": "output_1", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "solid_c"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "pagerank_data", "type": {"description": null, "displayName": "Path", "name": "Path"}}], "metadata": [], "name": "parse_pagerank_data", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "SparkRDD", "name": "SparkRDD"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pyspark_pagerank"}, "solidHandle": {"handleID": "parse_pagerank_data"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "CompositeSolidDefinition", "description": null, "inputDefinitions": [], "inputMappings": [], "metadata": [], "name": "process_delays_by_geo", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "S3FileHandle", "name": "S3FileHandle"}}], "outputMappings": [{"definition": {"name": "result"}, "mappedOutput": {"definition": {"name": "s3_file_handle"}, "solid": {"name": "upload_delays_by_geography_pdf_plots"}}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "process_delays_by_geo"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "sfo_weather_data", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "metadata": [], "name": "process_sfo_weather_data", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_sfo_weather_data"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid executes the following SQL statement:\n    \n    select * from q2_on_time_data\n    where origin = 'SFO'\n    ", "inputDefinitions": [], "metadata": [{"key": "kind", "value": "sql"}, {"key": "sql", "value": "drop table if exists q2_sfo_outbound_flights;\ncreate table q2_sfo_outbound_flights as \n    select * from q2_on_time_data\n    where origin = 'SFO'\n    ;"}], "name": "q2_sfo_outbound_flights", "outputDefinitions": [{"description": "The string name of the new table created by the solid", "name": "result", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "q2_sfo_outbound_flights"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_event_admins and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_event_admins", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_event_admins"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_events and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_events", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_events"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_fans and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_fans", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_fans"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_friends and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_friends", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_friends"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_group_admins and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_group_admins", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_group_admins"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_groups and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_groups", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_groups"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_pages and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_pages", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_pages"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Inject raw file for input to table raw_file_users and do expectation on output", "inputDefinitions": [], "metadata": [], "name": "raw_file_users", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "many_events"}, "solidHandle": {"handleID": "raw_file_users"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "path", "type": {"description": null, "displayName": "Path", "name": "Path"}}], "metadata": [], "name": "read_csv", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline_with_read_csv"}, "solidHandle": {"handleID": "read_csv"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "CompositeSolidDefinition", "description": "Ingest a zipped csv file from s3,\nstash in a keyed file store (does not download if already\npresent by default), unzip that file, and load it into a\nSpark Dataframe. See documentation in constituent solids for\nmore detail.", "inputDefinitions": [{"description": null, "name": "s3_coordinate", "type": {"description": null, "displayName": "S3Coordinate", "name": "S3Coordinate"}}, {"description": null, "name": "archive_member", "type": {"description": null, "displayName": "String", "name": "String"}}], "inputMappings": [{"definition": {"name": "s3_coordinate"}, "mappedInput": {"definition": {"name": "s3_coordinate"}, "solid": {"name": "cache_file_from_s3"}}}, {"definition": {"name": "archive_member"}, "mappedInput": {"definition": {"name": "archive_member"}, "solid": {"name": "unzip_file_handle"}}}], "metadata": [], "name": "s3_to_df", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "outputMappings": [{"definition": {"name": "result"}, "mappedOutput": {"definition": {"name": "result"}, "solid": {"name": "ingest_csv_file_handle_to_spark"}}}], "requiredResources": [{"resourceKey": "s3"}, {"resourceKey": "spark"}, {"resourceKey": "file_cache"}]}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "april_on_time_s3_to_df"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "june_on_time_s3_to_df"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "master_cord_s3_to_df"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "may_on_time_s3_to_df"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.s3_to_df"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.s3_to_df"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.s3_to_df"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "CompositeSolidDefinition", "description": "Ingest zipped csv file from s3, load into a Spark\nDataFrame, optionally subsample it (via configuring the\nsubsample_spark_dataset, solid), canonicalize the column names, and then\nload it into a data warehouse.\n", "inputDefinitions": [{"description": null, "name": "s3_coordinate", "type": {"description": null, "displayName": "S3Coordinate", "name": "S3Coordinate"}}, {"description": null, "name": "archive_member", "type": {"description": null, "displayName": "String", "name": "String"}}], "inputMappings": [{"definition": {"name": "s3_coordinate"}, "mappedInput": {"definition": {"name": "s3_coordinate"}, "solid": {"name": "s3_to_df"}}}, {"definition": {"name": "archive_member"}, "mappedInput": {"definition": {"name": "archive_member"}, "solid": {"name": "s3_to_df"}}}], "metadata": [], "name": "s3_to_dw_table", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "String", "name": "String"}}], "outputMappings": [{"definition": {"name": "result"}, "mappedOutput": {"definition": {"name": "table_name"}, "solid": {"name": "load_data_to_database_from_spark"}}}], "requiredResources": [{"resourceKey": "s3"}, {"resourceKey": "spark"}, {"resourceKey": "file_cache"}]}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid is backed by the notebook at /Users/alangenfeld/dagster/examples/dagster_examples/airline_demo/notebooks/SFO_Delays_by_Destination.ipynb", "inputDefinitions": [{"description": "The SQL table to use for calcuations.", "name": "table_name", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "metadata": [{"key": "notebook_path", "value": "/Users/alangenfeld/dagster/examples/dagster_examples/airline_demo/notebooks/SFO_Delays_by_Destination.ipynb"}, {"key": "kind", "value": "ipynb"}], "name": "sfo_delays_by_destination", "outputDefinitions": [{"description": "The path to the saved PDF plots.", "name": "result", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "sfo_delays_by_destination"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "units", "type": {"description": null, "displayName": "[Int]", "name": null}}], "metadata": [], "name": "sleeper", "outputDefinitions": [{"description": null, "name": "total", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "sleepy_pipeline"}, "solidHandle": {"handleID": "sleeper"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "sleepy_pipeline"}, "solidHandle": {"handleID": "sleeper_2"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "sleepy_pipeline"}, "solidHandle": {"handleID": "sleeper_3"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "sleepy_pipeline"}, "solidHandle": {"handleID": "sleeper_4"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "start", "type": {"description": null, "displayName": "Nothing", "name": "Nothing"}}], "metadata": [], "name": "snowflake_load", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": [{"resourceKey": "snowflake"}]}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "event_ingest_pipeline"}, "solidHandle": {"handleID": "snowflake_load"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [], "metadata": [], "name": "spawn", "outputDefinitions": [{"description": null, "name": "out_1", "type": {"description": null, "displayName": "String", "name": "String"}}, {"description": null, "name": "out_2", "type": {"description": null, "displayName": "String", "name": "String"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "stdout_spew_pipeline"}, "solidHandle": {"handleID": "spawn"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "name", "type": {"description": null, "displayName": "String", "name": "String"}}], "metadata": [], "name": "spew", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "stdout_spew_pipeline"}, "solidHandle": {"handleID": "spew"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "stdout_spew_pipeline"}, "solidHandle": {"handleID": "spew_2"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Bool"}, "description": null, "isOptional": false, "name": "return_wrong_type"}, {"configType": {"key": "Bool"}, "description": null, "isOptional": false, "name": "throw_in_solid"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Bool", "name": "Bool"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.31", "name": null}}, "description": null, "inputDefinitions": [{"description": null, "name": "string", "type": {"description": null, "displayName": "String", "name": "String"}}], "metadata": [], "name": "str_to_num", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "error_monster"}, "solidHandle": {"handleID": "end"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Int"}, "description": "The integer percentage of rows to sample from the input dataset.", "isOptional": false, "name": "subsample_pct"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Int", "name": "Int"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.165", "name": null}}, "description": "Subsample a spark dataset via the configuration option.", "inputDefinitions": [{"description": null, "name": "data_frame", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "metadata": [], "name": "subsample_spark_dataset", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "A Pyspark data frame.", "displayName": "PySparkDataFrame", "name": "PySparkDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.subsample_spark_dataset"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.subsample_spark_dataset"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.subsample_spark_dataset"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "num_df", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "metadata": [], "name": "sum_solid", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline"}, "solidHandle": {"handleID": "sum_solid"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline_with_read_csv"}, "solidHandle": {"handleID": "sum_solid"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "sum_df", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}, {"description": null, "name": "mult_df", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "metadata": [], "name": "sum_sq_solid", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": "Two-dimensional size-mutable, potentially heterogeneous\n    tabular data structure with labeled axes (rows and columns).\n    See http://pandas.pydata.org/", "displayName": "PandasDataFrame", "name": "PandasDataFrame"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline"}, "solidHandle": {"handleID": "sum_sq_solid"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "pandas_hello_world_pipeline_with_read_csv"}, "solidHandle": {"handleID": "sum_sq_solid"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid executes the following SQL statement:\n    \n    select\n        tickets.*,\n        coupons.dest,\n        coupons.destairportid,\n        coupons.destairportseqid, coupons.destcitymarketid,\n        coupons.destcountry,\n        coupons.deststatefips,\n        coupons.deststate,\n        coupons.deststatename,\n        coupons.destwac\n    from\n        q2_ticket_data as tickets,\n        q2_coupon_data as coupons\n    where\n        tickets.itinid = coupons.itinid;\n    ", "inputDefinitions": [], "metadata": [{"key": "kind", "value": "sql"}, {"key": "sql", "value": "drop table if exists tickets_with_destination;\ncreate table tickets_with_destination as \n    select\n        tickets.*,\n        coupons.dest,\n        coupons.destairportid,\n        coupons.destairportseqid, coupons.destcitymarketid,\n        coupons.destcountry,\n        coupons.deststatefips,\n        coupons.deststate,\n        coupons.deststatename,\n        coupons.destwac\n    from\n        q2_ticket_data as tickets,\n        q2_coupon_data as coupons\n    where\n        tickets.itinid = coupons.itinid;\n    ;"}], "name": "tickets_with_destination", "outputDefinitions": [{"description": "The string name of the new table created by the solid", "name": "result", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "tickets_with_destination"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "in_1", "type": {"description": null, "displayName": "Int", "name": "Int"}}, {"description": null, "name": "in_2", "type": {"description": null, "displayName": "Int", "name": "Int"}}, {"description": null, "name": "in_3", "type": {"description": null, "displayName": "Int", "name": "Int"}}, {"description": null, "name": "in_4", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "metadata": [], "name": "total", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Int", "name": "Int"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "sleepy_pipeline"}, "solidHandle": {"handleID": "total"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [{"description": null, "name": "input_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}, {"description": null, "name": "input_1", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "metadata": [], "name": "two_in_one_out", "outputDefinitions": [{"description": null, "name": "output_0", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "soild_f"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "log_spew"}, "solidHandle": {"handleID": "solid_d"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": {"configType": {"description": "A configuration dictionary with typed fields", "fields": [{"configType": {"key": "Float"}, "description": null, "isOptional": true, "name": "rate"}], "innerTypes": [{"description": "", "innerTypes": [], "isList": false, "isNullable": false, "isSelector": false, "key": "Float", "name": "Float"}], "isList": false, "isNullable": false, "isSelector": false, "key": "Dict.280", "name": null}}, "description": null, "inputDefinitions": [{"description": null, "name": "num", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "metadata": [], "name": "unreliable", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "five"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "four"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "one"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "seven"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "six"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "three"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "two"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": null, "inputDefinitions": [], "metadata": [], "name": "unreliable_start", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "Any", "name": "Any"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "unreliable_pipeline"}, "solidHandle": {"handleID": "unreliable_start"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "Unzip a file that is resident in an archive file as a member.\n    This solid operates on FileHandles, meaning that their physical is dependent\n    on what system storage is operating in the pipeline. The physical file could\n    be on local disk, or it could be in s3. If on s3, this solid will download\n    that file to local disk, perform the unzip, upload that file back to s3, and\n    then return that file handle for downstream use in the computations.\n    ", "inputDefinitions": [{"description": null, "name": "archive_file_handle", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}, {"description": null, "name": "archive_member", "type": {"description": null, "displayName": "String", "name": "String"}}], "metadata": [], "name": "unzip_file_handle", "outputDefinitions": [{"description": null, "name": "result", "type": {"description": null, "displayName": "FileHandle", "name": "FileHandle"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "april_on_time_s3_to_df.unzip_file_handle"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "june_on_time_s3_to_df.unzip_file_handle"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "master_cord_s3_to_df.unzip_file_handle"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "may_on_time_s3_to_df.unzip_file_handle"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_coupon_data.s3_to_df.unzip_file_handle"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_market_data.s3_to_df.unzip_file_handle"}}, {"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_ingest_pipeline"}, "solidHandle": {"handleID": "process_q2_ticket_data.s3_to_df.unzip_file_handle"}}]}, {"__typename": "UsedSolid", "definition": {"__typename": "SolidDefinition", "configField": null, "description": "This solid executes the following SQL statement:\n    \n    select\n        avg(cast(cast(arrdelay as float) as integer)) as avg_arrival_delay,\n        avg(cast(cast(depdelay as float) as integer)) as avg_departure_delay,\n        origin,\n        dest as destination,\n        count(1) as num_flights,\n        avg(cast(dest_latitude as float)) as dest_latitude,\n        avg(cast(dest_longitude as float)) as dest_longitude,\n        avg(cast(origin_latitude as float)) as origin_latitude,\n        avg(cast(origin_longitude as float)) as origin_longitude\n    from q2_on_time_data\n    where\n        cast(origin_longitude as float) > cast(dest_longitude as float) and\n        originstate != 'HI' and\n        deststate != 'HI' and\n        originstate != 'AK' and\n        deststate != 'AK'\n    group by (origin,destination)\n    order by num_flights desc\n    limit 100;\n    ", "inputDefinitions": [], "metadata": [{"key": "kind", "value": "sql"}, {"key": "sql", "value": "drop table if exists westbound_delays;\ncreate table westbound_delays as \n    select\n        avg(cast(cast(arrdelay as float) as integer)) as avg_arrival_delay,\n        avg(cast(cast(depdelay as float) as integer)) as avg_departure_delay,\n        origin,\n        dest as destination,\n        count(1) as num_flights,\n        avg(cast(dest_latitude as float)) as dest_latitude,\n        avg(cast(dest_longitude as float)) as dest_longitude,\n        avg(cast(origin_latitude as float)) as origin_latitude,\n        avg(cast(origin_longitude as float)) as origin_longitude\n    from q2_on_time_data\n    where\n        cast(origin_longitude as float) > cast(dest_longitude as float) and\n        originstate != 'HI' and\n        deststate != 'HI' and\n        originstate != 'AK' and\n        deststate != 'AK'\n    group by (origin,destination)\n    order by num_flights desc\n    limit 100;\n    ;"}], "name": "westbound_delays", "outputDefinitions": [{"description": "The string name of the new table created by the solid", "name": "result", "type": {"description": "The name of a database table", "displayName": "SqlTableName", "name": "SqlTableName"}}], "requiredResources": []}, "invocations": [{"__typename": "SolidInvocationSite", "pipeline": {"name": "airline_demo_warehouse_pipeline"}, "solidHandle": {"handleID": "process_delays_by_geo.westbound_delays"}}]}]}}
