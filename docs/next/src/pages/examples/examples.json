[
  {
    "name": "airflow_ingest",
    "title": "Airflow Ingest",
    "description": "Create a pipeline from an Airflow DAG"
  },
  {
    "name": "airline_demo",
    "title": "Airline Demo",
    "description": "A comprehensive demo to showcase Dagster and Dagit capabilities"
  },
  {
    "name": "materializations",
    "title": "Asset Materialization",
    "description": "Record that a solid materialized an asset"
  },
  {
    "name": "conditional_execution",
    "title": "Conditional Execution",
    "description": "Conditionally execute part of a pipeline"
  },
  {
    "name": "config_mapping",
    "title": "Config Mapping",
    "description": "Simplify solid config schemas with config mapping."
  },
  {
    "name": "dbt_example",
    "title": "dbt Integration",
    "description": "Use dagster-dbt to integrate dbt projects with Dagster."
  },
  {
    "name": "dep_dsl",
    "title": "Dependency DSL",
    "description": "Create a custom DSL for defining pipelines"
  },
  {
    "name": "deploy_docker",
    "title": "Docker Deployment",
    "description": "Example Docker Deployment"
  },
  {
    "name": "emr_pyspark",
    "title": "EMR PySpark",
    "description": "Run a PySpark solids in EMR"
  },
  {
    "name": "fan_in_pipeline",
    "title": "Fan-In Dependency",
    "description": "Create a pipeline with a fan-in dependency"
  },
  {
    "name": "ge_example",
    "title": "Great Expectations integration",
    "description": "Use Great Expectations to check data quality"
  },
  {
    "name": "hooks",
    "title": "Hooks",
    "description": "Create a pipeline with hooks"
  },
  {
    "name": "multi_location",
    "title": "Multi-Location Workspace",
    "description": "Setup a Dagster workspace with multiple locations."
  },
  {
    "name": "nothing",
    "title": "No-Data Dependencies",
    "description": "Modeling dependencies without inputs and outputs"
  },
  {
    "name": "pipeline_tags",
    "title": "Solid and Pipeline Tags",
    "description": "Create a pipeline with tags and a solid with tags"
  },
  {
    "name": "pipeline_unittesting",
    "title": "Pipeline Unit Test",
    "description": "Unit-test a pipeline"
  },
  {
    "name": "basic_pyspark",
    "title": "PySpark",
    "description": "Run PySpark code in solids"
  },
  {
    "name": "dynamic_graph",
    "title": "Dynamic Graph (Experimental)",
    "description": "Determine graph structure at runtime"
  },
  {
    "name": "simple_lakehouse",
    "title": "Lakehouse (Experimental)",
    "description": "Define a computation graph in terms of the tables it produces."
  },
  {
    "name": "multi_type_lakehouse",
    "title": "Lakehouse w/ Two Types (Experimental)",
    "description": "Use the Lakehouse API with multiple compute types."
  },
  {
    "name": "memoized_development",
    "title": "Memoization (Experimental)",
    "description": "Memoizing results from previous pipeline runs."
  }
]