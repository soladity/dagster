# -*- coding: utf-8 -*-
# snapshottest: v1 - https://goo.gl/zC4yUc
from __future__ import unicode_literals

from snapshottest import Snapshot


snapshots = Snapshot()

snapshots['test_scaffold_airflow_dag 1'] = [
    "'''Static scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to the',
    '"editable" py.py file, rather than changing the definitions in this "static" file. Please let us',
    'know if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'from airflow import DAG',
    'from airflow.operators.dagster_plugin import DagsterOperator',
    '',
    '',
    'def make_dag(dag_id, dag_description, dag_kwargs, s3_conn_id, modified_docker_operator_kwargs):',
    '    dag = DAG(',
    '        dag_id=dag_id,',
    '        description=dag_description,',
    '        **dag_kwargs,',
    '    )',
    '',
    'multiply__the__word_word_input__thunk_task = DagsterOperator(',
    "    step='multiply__the__word_word_input__thunk',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_word_input__thunk',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_transform_task = DagsterOperator(',
    "    step='multiply__the__word_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'count__letters_transform_task = DagsterOperator(',
    "    step='count__letters_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='count__letters_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_word_input__thunk_task.set_downstream(multiply__the__word_transform_task)',
    'multiply__the__word_transform_task.set_downstream(count__letters_transform_task)',
    ''
]

snapshots['test_scaffold_airflow_dag 2'] = [
    "'''Editable scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to this',
    '"editable" file, rather than changing the definitions in the "static" py.py file. Please let us know',
    'if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'import datetime',
    '',
    'from py import make_dag',
    '',
    '# Arguments to be passed to the ``default_args`` parameter of the ``airflow.DAG`` constructor.You',
    '# can override these with values of your choice.',
    'DEFAULT_ARGS = {{',
    "    'depends_on_past': False",
    "    'email': ['airflow@example.com']",
    "    'email_on_failure': False",
    "    'email_on_retry': False",
    "    'owner': 'airflow'",
    "    'retries': 1",
    "    'retry_delay': datetime.timedelta(0, 300)",
    '}}',
    '',
    '# Any additional keyword arguments to be passed to the ``airflow.DAG`` constructor. You can override',
    '# these with values of your choice.',
    'DAG_KWARGS = {{}}',
    '',
    '# Any additional keyword arguments to be passed to the ``ModifiedDockerOperator`` constructor. You',
    '# can override these with values of your choice.',
    'MODIFIED_DOCKER_OPERATOR_KWARGS = {{}}',
    '',
    '# The name of the autogenerated DAG. By default, this is just the name of the Dagster pipeline from',
    '# which the Airflow DAG was generated (demo_pipeline). You may want to override this if, for',
    '# instance, you want to schedule multiple DAGs corresponding to different configurations of the same',
    '# Dagster pipeline.',
    "DAG_ID = 'demo_pipeline'",
    '',
    '# The description of the autogenerated DAG. By default, this is the description of the Dagster',
    '# pipeline from which the Airflow DAG was generated. You may want to override this, as with the',
    '# DAG_ID parameter.',
    "DAG_DESCRIPTION = '''***Autogenerated by dagster-airflow***'''",
    '',
    '# Additional arguments, if any, to pass to the underlying',
    '# ``dagster_airflow.dagster_plugin.ModifiedDockerOperator``. Set these if, for instance, you need to',
    '# set special TLS parameters.',
    'DOCKER_ARGUMENTS = {{}}',
    '',
    '# Set your S3 connection id here, if you do not want to use the default ``aws_default`` connection.',
    "S3_CONN_ID = 'aws_default'",
    '',
    'dag = make_dag(',
    '    dag_id=DAG_ID,',
    '    dag_description=DAG_DESCRIPTION,',
    '    dag_kwargs=dict(default_args=DEFAULT_ARGS, **DAG_KWARGS),',
    '    s3_conn_id=S3_CONN_ID,',
    '    modified_docker_operator_kwargs=MODIFIED_DOCKER_OPERATOR_KWARGS,',
    ')',
    ''
]

snapshots['test_scaffold_airflow_dag_specify_dir 1'] = [
    "'''Static scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to the',
    '"editable" py.py file, rather than changing the definitions in this "static" file. Please let us',
    'know if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'from airflow import DAG',
    'from airflow.operators.dagster_plugin import DagsterOperator',
    '',
    '',
    'def make_dag(dag_id, dag_description, dag_kwargs, s3_conn_id, modified_docker_operator_kwargs):',
    '    dag = DAG(',
    '        dag_id=dag_id,',
    '        description=dag_description,',
    '        **dag_kwargs,',
    '    )',
    '',
    'multiply__the__word_word_input__thunk_task = DagsterOperator(',
    "    step='multiply__the__word_word_input__thunk',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_word_input__thunk',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_transform_task = DagsterOperator(',
    "    step='multiply__the__word_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'count__letters_transform_task = DagsterOperator(',
    "    step='count__letters_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='count__letters_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_word_input__thunk_task.set_downstream(multiply__the__word_transform_task)',
    'multiply__the__word_transform_task.set_downstream(count__letters_transform_task)',
    ''
]

snapshots['test_scaffold_airflow_dag_specify_dir 2'] = [
    "'''Editable scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to this',
    '"editable" file, rather than changing the definitions in the "static" py.py file. Please let us know',
    'if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'import datetime',
    '',
    'from py import make_dag',
    '',
    '# Arguments to be passed to the ``default_args`` parameter of the ``airflow.DAG`` constructor.You',
    '# can override these with values of your choice.',
    'DEFAULT_ARGS = {{',
    "    'depends_on_past': False",
    "    'email': ['airflow@example.com']",
    "    'email_on_failure': False",
    "    'email_on_retry': False",
    "    'owner': 'airflow'",
    "    'retries': 1",
    "    'retry_delay': datetime.timedelta(0, 300)",
    '}}',
    '',
    '# Any additional keyword arguments to be passed to the ``airflow.DAG`` constructor. You can override',
    '# these with values of your choice.',
    'DAG_KWARGS = {{}}',
    '',
    '# Any additional keyword arguments to be passed to the ``ModifiedDockerOperator`` constructor. You',
    '# can override these with values of your choice.',
    'MODIFIED_DOCKER_OPERATOR_KWARGS = {{}}',
    '',
    '# The name of the autogenerated DAG. By default, this is just the name of the Dagster pipeline from',
    '# which the Airflow DAG was generated (demo_pipeline). You may want to override this if, for',
    '# instance, you want to schedule multiple DAGs corresponding to different configurations of the same',
    '# Dagster pipeline.',
    "DAG_ID = 'demo_pipeline'",
    '',
    '# The description of the autogenerated DAG. By default, this is the description of the Dagster',
    '# pipeline from which the Airflow DAG was generated. You may want to override this, as with the',
    '# DAG_ID parameter.',
    "DAG_DESCRIPTION = '''***Autogenerated by dagster-airflow***'''",
    '',
    '# Additional arguments, if any, to pass to the underlying',
    '# ``dagster_airflow.dagster_plugin.ModifiedDockerOperator``. Set these if, for instance, you need to',
    '# set special TLS parameters.',
    'DOCKER_ARGUMENTS = {{}}',
    '',
    '# Set your S3 connection id here, if you do not want to use the default ``aws_default`` connection.',
    "S3_CONN_ID = 'aws_default'",
    '',
    'dag = make_dag(',
    '    dag_id=DAG_ID,',
    '    dag_description=DAG_DESCRIPTION,',
    '    dag_kwargs=dict(default_args=DEFAULT_ARGS, **DAG_KWARGS),',
    '    s3_conn_id=S3_CONN_ID,',
    '    modified_docker_operator_kwargs=MODIFIED_DOCKER_OPERATOR_KWARGS,',
    ')',
    ''
]

snapshots['test_scaffold_airflow_dag_specify_paths 1'] = [
    "'''Static scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to the',
    '"editable" py.py file, rather than changing the definitions in this "static" file. Please let us',
    'know if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'from airflow import DAG',
    'from airflow.operators.dagster_plugin import DagsterOperator',
    '',
    '',
    'def make_dag(dag_id, dag_description, dag_kwargs, s3_conn_id, modified_docker_operator_kwargs):',
    '    dag = DAG(',
    '        dag_id=dag_id,',
    '        description=dag_description,',
    '        **dag_kwargs,',
    '    )',
    '',
    'multiply__the__word_word_input__thunk_task = DagsterOperator(',
    "    step='multiply__the__word_word_input__thunk',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_word_input__thunk',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_transform_task = DagsterOperator(',
    "    step='multiply__the__word_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'count__letters_transform_task = DagsterOperator(',
    "    step='count__letters_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='count__letters_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_word_input__thunk_task.set_downstream(multiply__the__word_transform_task)',
    'multiply__the__word_transform_task.set_downstream(count__letters_transform_task)',
    ''
]

snapshots['test_scaffold_airflow_dag_specify_paths 2'] = [
    "'''Editable scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to this',
    '"editable" file, rather than changing the definitions in the "static" py.py file. Please let us know',
    'if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'import datetime',
    '',
    'from py import make_dag',
    '',
    '# Arguments to be passed to the ``default_args`` parameter of the ``airflow.DAG`` constructor.You',
    '# can override these with values of your choice.',
    'DEFAULT_ARGS = {{',
    "    'depends_on_past': False",
    "    'email': ['airflow@example.com']",
    "    'email_on_failure': False",
    "    'email_on_retry': False",
    "    'owner': 'airflow'",
    "    'retries': 1",
    "    'retry_delay': datetime.timedelta(0, 300)",
    '}}',
    '',
    '# Any additional keyword arguments to be passed to the ``airflow.DAG`` constructor. You can override',
    '# these with values of your choice.',
    'DAG_KWARGS = {{}}',
    '',
    '# Any additional keyword arguments to be passed to the ``ModifiedDockerOperator`` constructor. You',
    '# can override these with values of your choice.',
    'MODIFIED_DOCKER_OPERATOR_KWARGS = {{}}',
    '',
    '# The name of the autogenerated DAG. By default, this is just the name of the Dagster pipeline from',
    '# which the Airflow DAG was generated (demo_pipeline). You may want to override this if, for',
    '# instance, you want to schedule multiple DAGs corresponding to different configurations of the same',
    '# Dagster pipeline.',
    "DAG_ID = 'demo_pipeline'",
    '',
    '# The description of the autogenerated DAG. By default, this is the description of the Dagster',
    '# pipeline from which the Airflow DAG was generated. You may want to override this, as with the',
    '# DAG_ID parameter.',
    "DAG_DESCRIPTION = '''***Autogenerated by dagster-airflow***'''",
    '',
    '# Additional arguments, if any, to pass to the underlying',
    '# ``dagster_airflow.dagster_plugin.ModifiedDockerOperator``. Set these if, for instance, you need to',
    '# set special TLS parameters.',
    'DOCKER_ARGUMENTS = {{}}',
    '',
    '# Set your S3 connection id here, if you do not want to use the default ``aws_default`` connection.',
    "S3_CONN_ID = 'aws_default'",
    '',
    'dag = make_dag(',
    '    dag_id=DAG_ID,',
    '    dag_description=DAG_DESCRIPTION,',
    '    dag_kwargs=dict(default_args=DEFAULT_ARGS, **DAG_KWARGS),',
    '    s3_conn_id=S3_CONN_ID,',
    '    modified_docker_operator_kwargs=MODIFIED_DOCKER_OPERATOR_KWARGS,',
    ')',
    ''
]

snapshots['test_scaffold_airflow_override_args 1'] = [
    "'''Static scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to the',
    '"editable" py.py file, rather than changing the definitions in this "static" file. Please let us',
    'know if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'from airflow import DAG',
    'from airflow.operators.dagster_plugin import DagsterOperator',
    '',
    '',
    'def make_dag(dag_id, dag_description, dag_kwargs, s3_conn_id, modified_docker_operator_kwargs):',
    '    dag = DAG(',
    '        dag_id=dag_id,',
    '        description=dag_description,',
    '        **dag_kwargs,',
    '    )',
    '',
    'multiply__the__word_word_input__thunk_task = DagsterOperator(',
    "    step='multiply__the__word_word_input__thunk',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_word_input__thunk',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_transform_task = DagsterOperator(',
    "    step='multiply__the__word_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='multiply__the__word_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'count__letters_transform_task = DagsterOperator(',
    "    step='count__letters_transform',",
    '    dag=dag,',
    "    image='dagster-airflow-demo',",
    "    task_id='count__letters_transform',",
    '    s3_conn_id=S3_CONN_ID,',
    ')',
    '',
    'multiply__the__word_word_input__thunk_task.set_downstream(multiply__the__word_transform_task)',
    'multiply__the__word_transform_task.set_downstream(count__letters_transform_task)',
    ''
]

snapshots['test_scaffold_airflow_override_args 2'] = [
    "'''Editable scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:",
    '',
    "    {'context': {'default': {'config': {'log_level': 'DEBUG'}}},  'solids': {'multiply_the_word':",
    "    {'config': {'factor': 2},                                   'inputs': {'word': {'value':",
    "    'bar'}}}}}",
    '',
    'By convention, users should attempt to isolate post-codegen changes and customizations to this',
    '"editable" file, rather than changing the definitions in the "static" py.py file. Please let us know',
    'if you are encountering use cases where it is necessary to make changes to the static file.',
    "'''",
    '',
    'import datetime',
    '',
    'from py import make_dag',
    '',
    '# Arguments to be passed to the ``default_args`` parameter of the ``airflow.DAG`` constructor.You',
    '# can override these with values of your choice.',
    'DEFAULT_ARGS = {{',
    "    'depends_on_past': False",
    "    'email': ['airflow@example.com']",
    "    'email_on_failure': False",
    "    'email_on_retry': False",
    "    'owner': 'airflow'",
    "    'retries': 1",
    "    'retry_delay': datetime.timedelta(0, 300)",
    '}}',
    '',
    '# Any additional keyword arguments to be passed to the ``airflow.DAG`` constructor. You can override',
    '# these with values of your choice.',
    'DAG_KWARGS = {{}}',
    '',
    '# Any additional keyword arguments to be passed to the ``ModifiedDockerOperator`` constructor. You',
    '# can override these with values of your choice.',
    'MODIFIED_DOCKER_OPERATOR_KWARGS = {{}}',
    '',
    '# The name of the autogenerated DAG. By default, this is just the name of the Dagster pipeline from',
    '# which the Airflow DAG was generated (demo_pipeline). You may want to override this if, for',
    '# instance, you want to schedule multiple DAGs corresponding to different configurations of the same',
    '# Dagster pipeline.',
    "DAG_ID = 'demo_pipeline'",
    '',
    '# The description of the autogenerated DAG. By default, this is the description of the Dagster',
    '# pipeline from which the Airflow DAG was generated. You may want to override this, as with the',
    '# DAG_ID parameter.',
    "DAG_DESCRIPTION = '''***Autogenerated by dagster-airflow***'''",
    '',
    '# Additional arguments, if any, to pass to the underlying',
    '# ``dagster_airflow.dagster_plugin.ModifiedDockerOperator``. Set these if, for instance, you need to',
    '# set special TLS parameters.',
    'DOCKER_ARGUMENTS = {{}}',
    '',
    '# Set your S3 connection id here, if you do not want to use the default ``aws_default`` connection.',
    "S3_CONN_ID = 'aws_default'",
    '',
    'dag = make_dag(',
    '    dag_id=DAG_ID,',
    '    dag_description=DAG_DESCRIPTION,',
    '    dag_kwargs=dict(default_args=DEFAULT_ARGS, **DAG_KWARGS),',
    '    s3_conn_id=S3_CONN_ID,',
    '    modified_docker_operator_kwargs=MODIFIED_DOCKER_OPERATOR_KWARGS,',
    ')',
    ''
]
