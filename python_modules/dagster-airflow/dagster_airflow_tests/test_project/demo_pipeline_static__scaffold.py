'''Static scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:

    context:
      default:
        config: {log_level: DEBUG}
    solids:
      multiply_the_word:
        config: {factor: 2}
        inputs:
          word: {value: bar}
    

By convention, users should attempt to isolate post-codegen changes and customizations to the
"editable" demo_pipeline_editable__scaffold.py file, rather than changing the definitions in this
"static" file. Please let us know if you are encountering use cases where it is necessary to make
changes to the static file.
'''

from airflow import DAG
try:
    from airflow.operators.dagster_plugin import DagsterOperator
except (ModuleNotFoundError, ImportError):
    from dagster_airflow import DagsterOperator


CONFIG = '''
    {
      context: {
        default: {
          config: {
            log_level: "DEBUG"
          }
        }
      },
      solids: {
        multiply_the_word: {
          config: {
            factor: 2
          },
          inputs: {
            word: {
              value: "bar"
            }
          }
        }
      }
    }
'''.strip('\n').strip(' ')

PIPELINE_NAME = 'demo_pipeline'

STEPS_FOR_MULTIPLY_THE_WORD = [
    'multiply_the_word.word.input_thunk',
    'multiply_the_word.transform',
]
STEPS_FOR_COUNT_LETTERS = [
    'count_letters.transform',
]

def make_dag(
    dag_id,
    dag_description,
    dag_kwargs,
    operator_kwargs,
):
    dag = DAG(
        dag_id=dag_id,
        description=dag_description,
        **dag_kwargs
    )

    tasks = []

    multiply_the_word_task = DagsterOperator(
        step='multiply_the_word',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='dagster-airflow-demo',
        task_id='multiply_the_word',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_MULTIPLY_THE_WORD,
        **operator_kwargs
    )
    tasks.append(multiply_the_word_task)

    count_letters_task = DagsterOperator(
        step='count_letters',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='dagster-airflow-demo',
        task_id='count_letters',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_COUNT_LETTERS,
        **operator_kwargs
    )
    tasks.append(count_letters_task)

    multiply_the_word_task.set_downstream(count_letters_task)

    return (dag, tasks)
