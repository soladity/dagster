'''Static scaffolding autogenerated by dagster-airflow from pipeline demo_pipeline with config:

    context:
      default:
        config: {log_level: DEBUG}
    solids:
      multiply_the_word:
        config: {factor: 2}
        inputs:
          word: {value: bar}
    

By convention, users should attempt to isolate post-codegen changes and customizations to the
"editable" demo_pipeline_editable__scaffold.py file, rather than changing the definitions in this
"static" file. Please let us know if you are encountering use cases where it is necessary to make
changes to the static file.
'''

from airflow import DAG
from airflow.operators.dagster_plugin import DagsterOperator


CONFIG = '''
    {
      context: {
        default: {
          config: {
            log_level: "DEBUG"
          }
        }
      },
      solids: {
        multiply_the_word: {
          config: {
            factor: 2
          },
          inputs: {
            word: {
              value: "bar"
            }
          }
        }
      }
    }
'''.strip('\n').strip(' ')

PIPELINE_NAME = 'demo_pipeline'

STEP_EXECUTIONS_MULTIPLY__THE__WORD_WORD_INPUT__THUNK = {
    'step_key': 'multiply_the_word.word.input_thunk',
    'inputs': [
    ],
    'outputs': [
        {
            'output_name': 'input_thunk_output',
            'key': '/tmp/results/{run_id_prefix}multiply__the__word_word_input__thunk___input__thunk__output.pickle'
        },
    ]
}

STEP_EXECUTIONS_MULTIPLY__THE__WORD_TRANSFORM = {
    'step_key': 'multiply_the_word.transform',
    'inputs': [
        {
            'input_name': 'word',
            'key': '/tmp/results/{run_id_prefix}multiply__the__word_word_input__thunk___input__thunk__output.pickle'
        },
    ],
    'outputs': [
        {
            'output_name': 'result',
            'key': '/tmp/results/{run_id_prefix}multiply__the__word_transform___result.pickle'
        },
    ]
}

STEP_EXECUTIONS_COUNT__LETTERS_TRANSFORM = {
    'step_key': 'count_letters.transform',
    'inputs': [
        {
            'input_name': 'word',
            'key': '/tmp/results/{run_id_prefix}multiply__the__word_transform___result.pickle'
        },
    ],
    'outputs': [
        {
            'output_name': 'result',
            'key': '/tmp/results/{run_id_prefix}count__letters_transform___result.pickle'
        },
    ]
}


def make_dag(
    dag_id,
    dag_description,
    dag_kwargs,
    s3_conn_id,
    modified_docker_operator_kwargs,
    host_tmp_dir
):
    dag = DAG(
        dag_id=dag_id,
        description=dag_description,
        **dag_kwargs
    )

    tasks = []

    multiply__the__word_word_input__thunk_task = DagsterOperator(
        step='multiply_the_word.word.input_thunk',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        host_tmp_dir=host_tmp_dir,
        image='dagster-airflow-demo',
        task_id='multiply__the__word_word_input__thunk',
        s3_conn_id=s3_conn_id,
        pipeline_name=PIPELINE_NAME,
        step_executions=STEP_EXECUTIONS_MULTIPLY__THE__WORD_WORD_INPUT__THUNK,
    )
    tasks.append(multiply__the__word_word_input__thunk_task)

    multiply__the__word_transform_task = DagsterOperator(
        step='multiply_the_word.transform',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        host_tmp_dir=host_tmp_dir,
        image='dagster-airflow-demo',
        task_id='multiply__the__word_transform',
        s3_conn_id=s3_conn_id,
        pipeline_name=PIPELINE_NAME,
        step_executions=STEP_EXECUTIONS_MULTIPLY__THE__WORD_TRANSFORM,
    )
    tasks.append(multiply__the__word_transform_task)

    count__letters_transform_task = DagsterOperator(
        step='count_letters.transform',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        host_tmp_dir=host_tmp_dir,
        image='dagster-airflow-demo',
        task_id='count__letters_transform',
        s3_conn_id=s3_conn_id,
        pipeline_name=PIPELINE_NAME,
        step_executions=STEP_EXECUTIONS_COUNT__LETTERS_TRANSFORM,
    )
    tasks.append(count__letters_transform_task)

    multiply__the__word_word_input__thunk_task.set_downstream(multiply__the__word_transform_task)
    multiply__the__word_transform_task.set_downstream(count__letters_transform_task)

    return (dag, tasks)
