'''Static scaffolding autogenerated by dagster-airflow from pipeline airline_demo_warehouse_pipeline
with config:

    context:
      local:
        resources:
          db_info:
            config: {postgres_db_name: test, postgres_hostname: localhost, postgres_password: test,
              postgres_username: test}
          download_manager:
            config: {bucket: dagster-airline-demo-source-data, key: test, skip_if_present: true,
              target_folder: source_data}
    solids:
      upload_delays_by_geography_pdf_plots:
        config: {bucket: dagster-airline-demo-sink, key: delays_by_geography.pdf}
      upload_delays_vs_fares_pdf_plots:
        config: {bucket: dagster-airline-demo-sink, key: delays_vs_fares.pdf}
      upload_outbound_avg_delay_pdf_plots:
        config: {bucket: dagster-airline-demo-sink, key: sfo_outbound_avg_delay_plots.pdf}
    storage:
      s3: {s3_bucket: dagster-airflow-scratch}
    

By convention, users should attempt to isolate post-codegen changes and customizations to the
"editable" airline_demo_warehouse_pipeline_editable__scaffold.py file, rather than changing the
definitions in this "static" file. Please let us know if you are encountering use cases where it is
necessary to make changes to the static file.
'''

from airflow import DAG
try:
    from airflow.operators.dagster_plugin import DagsterOperator
except (ModuleNotFoundError, ImportError):
    from dagster_airflow import DagsterOperator


CONFIG = '''
    {
      context: {
        local: {
          resources: {
            db_info: {
              config: {
                postgres_username: "test",
                postgres_password: "test",
                postgres_hostname: "localhost",
                postgres_db_name: "test"
              }
            },
            download_manager: {
              config: {
                bucket: "dagster-airline-demo-source-data",
                key: "test",
                skip_if_present: true,
                target_folder: "source_data"
              }
            }
          }
        }
      },
      storage: {
        s3: {
          s3_bucket: "dagster-airflow-scratch"
        }
      },
      solids: {
        upload_delays_by_geography_pdf_plots: {
          config: {
            bucket: "dagster-airline-demo-sink",
            key: "delays_by_geography.pdf"
          }
        },
        upload_delays_vs_fares_pdf_plots: {
          config: {
            bucket: "dagster-airline-demo-sink",
            key: "delays_vs_fares.pdf"
          }
        },
        upload_outbound_avg_delay_pdf_plots: {
          config: {
            bucket: "dagster-airline-demo-sink",
            key: "sfo_outbound_avg_delay_plots.pdf"
          }
        }
      }
    }
'''.strip('\n').strip(' ')

PIPELINE_NAME = 'airline_demo_warehouse_pipeline'

STEPS_FOR_EASTBOUND_DELAYS = [
    'eastbound_delays.transform',
]
STEPS_FOR_Q2_SFO_OUTBOUND_FLIGHTS = [
    'q2_sfo_outbound_flights.transform',
]
STEPS_FOR_TICKETS_WITH_DESTINATION = [
    'tickets_with_destination.transform',
]
STEPS_FOR_WESTBOUND_DELAYS = [
    'westbound_delays.transform',
]
STEPS_FOR_AVERAGE_SFO_OUTBOUND_AVG_DELAYS_BY_DESTINATION = [
    'average_sfo_outbound_avg_delays_by_destination.transform',
]
STEPS_FOR_DELAYS_BY_GEOGRAPHY = [
    'delays_by_geography.transform',
]
STEPS_FOR_DELAYS_VS_FARES = [
    'delays_vs_fares.transform',
]
STEPS_FOR_SFO_DELAYS_BY_DESTINATION = [
    'sfo_delays_by_destination.transform',
]
STEPS_FOR_UPLOAD_DELAYS_BY_GEOGRAPHY_PDF_PLOTS = [
    'upload_delays_by_geography_pdf_plots.transform',
]
STEPS_FOR_FARES_VS_DELAYS = [
    'fares_vs_delays.transform',
]
STEPS_FOR_UPLOAD_OUTBOUND_AVG_DELAY_PDF_PLOTS = [
    'upload_outbound_avg_delay_pdf_plots.transform',
]
STEPS_FOR_UPLOAD_DELAYS_VS_FARES_PDF_PLOTS = [
    'upload_delays_vs_fares_pdf_plots.transform',
]

def make_dag(
    dag_id,
    dag_description,
    dag_kwargs,
    operator_kwargs,
):
    dag = DAG(
        dag_id=dag_id,
        description=dag_description,
        **dag_kwargs
    )

    tasks = []

    eastbound_delays_task = DagsterOperator(
        step='eastbound_delays',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='eastbound_delays',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_EASTBOUND_DELAYS,
        **operator_kwargs
    )
    tasks.append(eastbound_delays_task)

    q2_sfo_outbound_flights_task = DagsterOperator(
        step='q2_sfo_outbound_flights',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='q2_sfo_outbound_flights',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_Q2_SFO_OUTBOUND_FLIGHTS,
        **operator_kwargs
    )
    tasks.append(q2_sfo_outbound_flights_task)

    tickets_with_destination_task = DagsterOperator(
        step='tickets_with_destination',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='tickets_with_destination',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_TICKETS_WITH_DESTINATION,
        **operator_kwargs
    )
    tasks.append(tickets_with_destination_task)

    westbound_delays_task = DagsterOperator(
        step='westbound_delays',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='westbound_delays',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_WESTBOUND_DELAYS,
        **operator_kwargs
    )
    tasks.append(westbound_delays_task)

    average_sfo_outbound_avg_delays_by_destination_task = DagsterOperator(
        step='average_sfo_outbound_avg_delays_by_destination',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='average_sfo_outbound_avg_delays_by_destination',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_AVERAGE_SFO_OUTBOUND_AVG_DELAYS_BY_DESTINATION,
        **operator_kwargs
    )
    tasks.append(average_sfo_outbound_avg_delays_by_destination_task)

    delays_by_geography_task = DagsterOperator(
        step='delays_by_geography',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='delays_by_geography',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_DELAYS_BY_GEOGRAPHY,
        **operator_kwargs
    )
    tasks.append(delays_by_geography_task)

    delays_vs_fares_task = DagsterOperator(
        step='delays_vs_fares',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='delays_vs_fares',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_DELAYS_VS_FARES,
        **operator_kwargs
    )
    tasks.append(delays_vs_fares_task)

    sfo_delays_by_destination_task = DagsterOperator(
        step='sfo_delays_by_destination',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='sfo_delays_by_destination',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_SFO_DELAYS_BY_DESTINATION,
        **operator_kwargs
    )
    tasks.append(sfo_delays_by_destination_task)

    upload_delays_by_geography_pdf_plots_task = DagsterOperator(
        step='upload_delays_by_geography_pdf_plots',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='upload_delays_by_geography_pdf_plots',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_UPLOAD_DELAYS_BY_GEOGRAPHY_PDF_PLOTS,
        **operator_kwargs
    )
    tasks.append(upload_delays_by_geography_pdf_plots_task)

    fares_vs_delays_task = DagsterOperator(
        step='fares_vs_delays',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='fares_vs_delays',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_FARES_VS_DELAYS,
        **operator_kwargs
    )
    tasks.append(fares_vs_delays_task)

    upload_outbound_avg_delay_pdf_plots_task = DagsterOperator(
        step='upload_outbound_avg_delay_pdf_plots',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='upload_outbound_avg_delay_pdf_plots',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_UPLOAD_OUTBOUND_AVG_DELAY_PDF_PLOTS,
        **operator_kwargs
    )
    tasks.append(upload_outbound_avg_delay_pdf_plots_task)

    upload_delays_vs_fares_pdf_plots_task = DagsterOperator(
        step='upload_delays_vs_fares_pdf_plots',
        config=CONFIG,
        dag=dag,
        tmp_dir='/tmp/results',
        image='airline-demo-airflow',
        task_id='upload_delays_vs_fares_pdf_plots',
        pipeline_name=PIPELINE_NAME,
        step_keys=STEPS_FOR_UPLOAD_DELAYS_VS_FARES_PDF_PLOTS,
        **operator_kwargs
    )
    tasks.append(upload_delays_vs_fares_pdf_plots_task)

    q2_sfo_outbound_flights_task.set_downstream(average_sfo_outbound_avg_delays_by_destination_task)
    westbound_delays_task.set_downstream(delays_by_geography_task)
    eastbound_delays_task.set_downstream(delays_by_geography_task)
    tickets_with_destination_task.set_downstream(delays_vs_fares_task)
    average_sfo_outbound_avg_delays_by_destination_task.set_downstream(delays_vs_fares_task)
    average_sfo_outbound_avg_delays_by_destination_task.set_downstream(sfo_delays_by_destination_task)
    delays_by_geography_task.set_downstream(upload_delays_by_geography_pdf_plots_task)
    delays_vs_fares_task.set_downstream(fares_vs_delays_task)
    sfo_delays_by_destination_task.set_downstream(upload_outbound_avg_delay_pdf_plots_task)
    fares_vs_delays_task.set_downstream(upload_delays_vs_fares_pdf_plots_task)

    return (dag, tasks)
