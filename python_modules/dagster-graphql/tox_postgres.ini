[tox]
envlist = py{38, 37, 36, 27}-{unix,windows}-{not_graphql_context_test_suite,postgres_instance_hosted_user_process_env,postgres_instance_multi_location,postgres_instance_managed_grpc_env,postgres_instance_deployed_grpc_env},pylint

[testenv]
passenv = CI_* COVERALLS_REPO_TOKEN BUILDKITE POSTGRES_TEST_DB_HOST
deps =
  -r ../dagster/dev-requirements.txt
  -e ../dagster
  -e ../libraries/dagster-postgres
usedevelop = true
whitelist_externals =
  /bin/bash
  echo
commands =
  !windows: /bin/bash -c '! pip list --exclude-editable | grep -e dagster -e dagit'
  echo -e "--- \033[0;32m:pytest: Running tox tests\033[0m"
  not_graphql_context_test_suite: pytest -m "not graphql_context_test_suite" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres_instance_hosted_user_process_env: pytest -m "graphql_context_test_suite and postgres_instance and hosted_user_process_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres_instance_multi_location: pytest -m "graphql_context_test_suite and postgres_instance and multi_location" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres_instance_managed_grpc_env: pytest -m "graphql_context_test_suite and postgres_instance and managed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}
  postgres_instance_deployed_grpc_env: pytest -m "graphql_context_test_suite and postgres_instance and deployed_grpc_env" -vv --junitxml=dagster_graphql_test_results.xml --cov=dagster_graphql --cov-append --cov-report= {posargs}

  coverage report --omit='.tox/*,**/test_*.py' --skip-covered
  coverage html --omit='.tox/*,**/test_*.py'
  coverage xml --omit='.tox/*,**/test_*.py'

[testenv:pylint]
whitelist_externals =
  pylint
basepython =
  python3.7
commands =
  pylint -j 0 --rcfile=../../.pylintrc dagster_graphql dagster_graphql_tests