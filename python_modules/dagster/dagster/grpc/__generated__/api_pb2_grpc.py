# @generated

# This file was generated by running `python -m dagster.grpc.compile`
# Do not edit this file directly, and do not attempt to recompile it using
# grpc_tools.protoc directly, as several changes must be made to the raw output

# pylint: disable=no-member, unused-argument

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import api_pb2 as api__pb2


class DagsterApiStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
            '/api.DagsterApi/Ping',
            request_serializer=api__pb2.PingRequest.SerializeToString,
            response_deserializer=api__pb2.PingReply.FromString,
        )
        self.ExecutionPlanSnapshot = channel.unary_unary(
            '/api.DagsterApi/ExecutionPlanSnapshot',
            request_serializer=api__pb2.ExecutionPlanSnapshotRequest.SerializeToString,
            response_deserializer=api__pb2.ExecutionPlanSnapshotReply.FromString,
        )
        self.ListRepositories = channel.unary_unary(
            '/api.DagsterApi/ListRepositories',
            request_serializer=api__pb2.ListRepositoriesRequest.SerializeToString,
            response_deserializer=api__pb2.ListRepositoriesReply.FromString,
        )


class DagsterApiServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecutionPlanSnapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRepositories(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DagsterApiServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Ping': grpc.unary_unary_rpc_method_handler(
            servicer.Ping,
            request_deserializer=api__pb2.PingRequest.FromString,
            response_serializer=api__pb2.PingReply.SerializeToString,
        ),
        'ExecutionPlanSnapshot': grpc.unary_unary_rpc_method_handler(
            servicer.ExecutionPlanSnapshot,
            request_deserializer=api__pb2.ExecutionPlanSnapshotRequest.FromString,
            response_serializer=api__pb2.ExecutionPlanSnapshotReply.SerializeToString,
        ),
        'ListRepositories': grpc.unary_unary_rpc_method_handler(
            servicer.ListRepositories,
            request_deserializer=api__pb2.ListRepositoriesRequest.FromString,
            response_serializer=api__pb2.ListRepositoriesReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler('api.DagsterApi', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DagsterApi(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Ping(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.DagsterApi/Ping',
            api__pb2.PingRequest.SerializeToString,
            api__pb2.PingReply.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ExecutionPlanSnapshot(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.DagsterApi/ExecutionPlanSnapshot',
            api__pb2.ExecutionPlanSnapshotRequest.SerializeToString,
            api__pb2.ExecutionPlanSnapshotReply.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListRepositories(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/api.DagsterApi/ListRepositories',
            api__pb2.ListRepositoriesRequest.SerializeToString,
            api__pb2.ListRepositoriesReply.FromString,
            options,
            channel_credentials,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
