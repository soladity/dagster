---
version: "3.8"

services:
  # This service runs dagit. It has no pipeline code; instead it loads its
  # pipelines from the gRPC server running in the pipelines service.
  # Because our instance uses the QueuedRunCoordinator, any runs submitted from
  # dagit will be put on a queue and later dequeued and launched by
  # the dagster-daemon service.
  dagit:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dagit
    image: "$REGISTRY_URL/deploy_ecs/dagit"
    container_name: dagit
    command: "dagit -h 0.0.0.0 -p 3000 -w workspace.yaml"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_POSTGRES_HOSTNAME: "postgresql"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_USER: "postgres_user"
    depends_on:
      - postgresql
      - pipelines

  # This service runs the dagster-daemon process, which is responsible for
  # taking runs off of the queue and launching them, as well as creating
  # runs from schedules or sensors.
  daemon:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: dagster
    image: "$REGISTRY_URL/deploy_ecs/daemon"
    container_name: daemon
    command: "dagster-daemon run"
    environment:
      DAGSTER_POSTGRES_HOSTNAME: "postgresql"
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - postgresql
      - pipelines
    # Grant the EcsRunLauncher the ability to modify task definitions and
    # run new tasks
    x-aws-policies:
      - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"

  # This service runs a gRPC server that serves information about your
  # repository. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container.
  # Multiple containers like this can be deployed separately - each needs to
  # run on its own port and have its own entry in the workspace.yaml file.
  pipelines:
    build:
      context: .
      dockerfile: ./Dockerfile
      target: pipelines
    image: "$REGISTRY_URL/deploy_ecs/pipelines"
    container_name: pipelines
    command: "dagster api grpc -h 0.0.0.0 -p 4000 -f repo.py"
    environment:
      DAGSTER_POSTGRES_DB: "postgres_db"
      DAGSTER_POSTGRES_HOSTNAME: "postgresql"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_CURRENT_IMAGE: "$REGISTRY_URL/deploy_ecs/pipelines"


  # This service runs the postgres DB used by dagster for run storage, schedule
  # storage, and event log storage. In a real deployment, you might choose to
  # remove this in favor of an RDS instance.
  postgresql:
    image: postgres:11
    container_name: postgresql
    environment:
      POSTGRES_DB: "postgres_db"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_USER: "postgres_user"
